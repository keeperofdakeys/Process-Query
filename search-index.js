var searchIndex = {};
searchIndex['psq'] = {"items":[],"paths":[]};
searchIndex['freer'] = {"items":[],"paths":[]};
searchIndex['procrs'] = {"items":[[0,"pid","procrs","Get information about a process (/proc/[pid]/)",null,null],[3,"Pid","procrs::pid","A struct containing information about a process.",null,null],[12,"pid","","The tid of this process",0,null],[12,"stat","","The /proc/[pid]/stat file",0,null],[12,"status","","The /proc/[pid]/status file",0,null],[12,"cmdline","","The /proc/[pid]/cmdline file",0,null],[3,"PidIter","","An Iterator over processes in the system.",null,null],[3,"TidIter","","An Iterator over threads of processes in the system.",null,null],[4,"PidQuery","","A list of query types for process querying.",null,null],[13,"PidQuery","","Query by pid",1,null],[13,"PpidQuery","","Query by ppid",1,null],[13,"NameQuery","","Query by program name",1,null],[13,"CmdlineQuery","","Query by cmdline contents (joined with space)",1,null],[13,"NoneQuery","","An empty query that always matches",1,null],[0,"stat","","Get process stats (/proc/[pid]/stat)",null,null],[3,"PidStat","procrs::pid::stat","A struct containing information from the stat file for a process.",null,null],[12,"pid","","The process id.",2,null],[12,"comm","","The filename of the executable.",2,null],[12,"state","","The process state.",2,null],[12,"ppid","","The process id of the parent process.",2,null],[12,"pgrp","","The process group id.",2,null],[12,"session","","The session id of this process.",2,null],[12,"tty_nr","","The controlling tty of this process.",2,null],[12,"tpgid","","The id of the process controlling the tty of this process.",2,null],[12,"flags","","The kernel flags of this processj.",2,null],[12,"minflt","","Count of minor page faults not requiring disk access.",2,null],[12,"cminflt","","Count of minor page faults in children we are waiting for.",2,null],[12,"majflt","","Count of major page faults not requiring disk acceess.",2,null],[12,"cmajflt","","Count of major page faults in children we are waiting for.",2,null],[12,"utime","","Amout of time this process has been scheduled in user mode.",2,null],[12,"stime","","Amount of time this process has been scheduled in kernel mode.",2,null],[12,"cutime","","Amount of time children we are waiting for have been scheduled in user mode.",2,null],[12,"cstime","","Amount of time children we are waiting for have been scheduled in kernel mode.",2,null],[12,"priority","","Priority of process.",2,null],[12,"nice","","Process nice value (19 low -> -20 high).",2,null],[12,"num_threads","","Number of threads this process is using.",2,null],[12,"itrealvalue","","Count of jiffies before we receive the next SIGALRM (0 since kernel 2.6.17).",2,null],[12,"starttime","","The time the process started after boot (ticks since kernel 2.6).",2,null],[12,"vsize","","Virtual memory size in bytes.",2,null],[12,"rss","","Resident set size in pages.",2,null],[12,"rsslim","","RSS soft limit of process.",2,null],[12,"startcode","","Memory address where executable memory starts.",2,null],[12,"endcode","","Memory address where executable memory stops.",2,null],[12,"startstack","","The start address of the stack (ie: bottom).",2,null],[12,"kstkesp","","The current value of ESP (stack pointer).",2,null],[12,"kstkeip","","The current EIP (instruction pointer).",2,null],[12,"signal","","The bitmap of pending signals, displayed as a decimal number.",2,null],[12,"blocked","","The bitmap of blocked signals, displayed as a decimal number.",2,null],[12,"sigignore","","The bitmap of ignored signals, displayed as a decimal number.",2,null],[12,"sigcatch","","The bitmap of caught signals, displayed as a decimal number.",2,null],[12,"wchan","","This is the \"channel\" in which the process is waiting.",2,null],[12,"nswap","","Number of pages swapped (not maintained).",2,null],[12,"cnswap","","Cumulative nswap for child processes (not maintained).",2,null],[12,"exit_signal","","Signal sent to the parent when we die.",2,null],[12,"processor","","CPU number last executed on.",2,null],[12,"rt_priority","","Real-time scheduling priority.",2,null],[12,"policy","","Scheduling policy.",2,null],[12,"delayacct_blkio_ticks","","Aggregated block I/O delays, measured in clock ticks.",2,null],[12,"guest_time","","Time spent running a virtual CPU for a guest OS, in clock ticks.",2,null],[12,"cguest_time","","Guest time of the process's children, in clock ticks.",2,null],[12,"start_data","","Address above which init'd and uninit'd (BSS) data is placed.",2,null],[12,"end_data","","Address below which init'd and uninit'd (BSS) data is placed.",2,null],[12,"start_brk","","Address above which program heap can be expanded.",2,null],[12,"arg_start","","Address above which program cmdline args (arv) are placed.",2,null],[12,"arg_end","","Address below  which program cmdline args (arv) are placed.",2,null],[12,"env_start","","Address above which program environment is placed.",2,null],[12,"env_end","","Address below which program environment is placed.",2,null],[12,"exit_code","","The thread's exit status.",2,null],[4,"PidState","","A list of states that a process can be in.",null,null],[13,"Running","","Running",3,null],[13,"Sleeping","","Sleeping in an interruptible wait",3,null],[13,"Waiting","","Waiting in an uninterruptible disk sleep",3,null],[13,"Zombie","","Zombie",3,null],[13,"Stopped","","Stopped (on a signal) or (before LInux 2.6.33) trace stopped",3,null],[13,"Tracing","","Tracing stop",3,null],[13,"Dead","","Dead",3,null],[13,"Wakekill","","Wakekill",3,null],[13,"Waking","","Waking",3,null],[13,"Parked","","Parked",3,null],[11,"eq","","",2,{"inputs":[{"name":"pidstat"},{"name":"pidstat"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"pidstat"},{"name":"pidstat"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"pidstat"}],"output":{"name":"pidstat"}}],[11,"fmt","","",2,{"inputs":[{"name":"pidstat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Generate PidStat struct given a process directory.",2,{"inputs":[{"name":"pidstat"},{"name":"path"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"pidstate"},{"name":"pidstate"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"pidstate"},{"name":"pidstate"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"pidstate"}],"output":{"name":"pidstate"}}],[11,"fmt","","",3,{"inputs":[{"name":"pidstate"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"status","procrs::pid","Get process status (/proc/[pid]/status)",null,null],[3,"PidStatus","procrs::pid::status","A struct containing information from the status file for a process.",null,null],[12,"name","","",4,null],[12,"tgid","","",4,null],[12,"pid","","",4,null],[12,"ppid","","",4,null],[12,"tracerpid","","",4,null],[12,"uid","","",4,null],[12,"gid","","",4,null],[12,"fdsize","","",4,null],[12,"vmpeak","","",4,null],[12,"vmsize","","",4,null],[12,"vmlck","","",4,null],[12,"vmpin","","",4,null],[12,"vmhwm","","",4,null],[12,"vmrss","","",4,null],[12,"vmdata","","",4,null],[12,"vmstk","","",4,null],[12,"vmexe","","",4,null],[12,"vmlib","","",4,null],[12,"vmpte","","",4,null],[12,"vmpmd","","",4,null],[12,"vmswap","","",4,null],[12,"threads","","",4,null],[11,"eq","","",4,{"inputs":[{"name":"pidstatus"},{"name":"pidstatus"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"pidstatus"},{"name":"pidstatus"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"pidstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Generate PidStatus struct given a process directory",4,{"inputs":[{"name":"pidstatus"},{"name":"path"}],"output":{"name":"result"}}],[11,"new","std::collections::hash::set","Creates an empty HashSet.",5,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty HashSet with space for at least `n` elements in\nthe hash table.",5,{"inputs":[{"name":"hashset"},{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",5,{"inputs":[{"name":"hashset"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hasher","","Creates an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",5,{"inputs":[{"name":"hashset"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_hash_state","","Deprecated, renamed to `with_hasher`",5,{"inputs":[{"name":"hashset"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hash_state","","Deprecated, renamed to `with_capacity_and_hasher`",5,{"inputs":[{"name":"hashset"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",5,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",5,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",5,null],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &'a T.",5,{"inputs":[{"name":"hashset"}],"output":{"name":"iter"}}],[11,"difference","","Visit the values representing the difference.",5,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",5,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visit the values representing the intersection.",5,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"intersection"}}],[11,"union","","Visit the values representing the union.",5,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",5,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",5,{"inputs":[{"name":"hashset"}],"output":{"name":"bool"}}],[11,"drain","","Clears the set, returning all elements in an iterator.",5,{"inputs":[{"name":"hashset"}],"output":{"name":"drain"}}],[11,"clear","","Clears the set, removing all values.",5,null],[11,"contains","","Returns `true` if the set contains a value.",5,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",5,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",5,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",5,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",5,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",5,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",5,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",5,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",5,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"from","alloc::boxed","",6,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",6,{"inputs":[{"name":"box"},{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",6,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",6,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",6,{"inputs":[{"name":"box"},{"name":"str"}],"output":{"name":"box"}}],[11,"from","","",6,{"inputs":[{"name":"box"},{"name":"str"}],"output":{"name":"box"}}],[11,"description","core::str","",7,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"str"}}],[11,"description","","",8,{"inputs":[{"name":"utf8error"}],"output":{"name":"str"}}],[11,"description","core::num","",9,{"inputs":[{"name":"parseinterror"}],"output":{"name":"str"}}],[11,"description","core::num::dec2flt","",10,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"str"}}],[11,"description","collections::string","",11,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"str"}}],[11,"description","","",12,{"inputs":[{"name":"fromutf16error"}],"output":{"name":"str"}}],[11,"is","procrs::pid","Returns true if the boxed type is the same as `T`",13,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",13,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",13,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",13,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",13,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",13,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",13,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",13,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",13,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",13,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",13,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",13,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"next","std::ascii","",14,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"next_back","","",14,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"shl","core::num","",15,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",15,null],[11,"shr","","",15,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",15,null],[11,"shl","","",15,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",15,null],[11,"shr","","",15,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",15,null],[11,"shl","","",15,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",15,null],[11,"shr","","",15,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",15,null],[11,"shl","","",15,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",15,null],[11,"shr","","",15,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",15,null],[11,"shl","","",15,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",15,null],[11,"shr","","",15,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",15,null],[11,"shl","","",15,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",15,null],[11,"shr","","",15,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",15,null],[11,"shl","","",15,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",15,null],[11,"shr","","",15,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",15,null],[11,"shl","","",15,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",15,null],[11,"shr","","",15,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",15,null],[11,"shl","","",15,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",15,null],[11,"shr","","",15,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",15,null],[11,"shl","","",15,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",15,null],[11,"shr","","",15,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",15,null],[11,"add","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",15,null],[11,"sub","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",15,null],[11,"mul","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",15,null],[11,"div","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",15,null],[11,"rem","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",15,null],[11,"not","","",15,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",15,null],[11,"bitor","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",15,null],[11,"bitand","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",15,null],[11,"add","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",15,null],[11,"sub","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",15,null],[11,"mul","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",15,null],[11,"div","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",15,null],[11,"rem","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",15,null],[11,"not","","",15,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",15,null],[11,"bitor","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",15,null],[11,"bitand","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",15,null],[11,"add","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",15,null],[11,"sub","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",15,null],[11,"mul","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",15,null],[11,"div","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",15,null],[11,"rem","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",15,null],[11,"not","","",15,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",15,null],[11,"bitor","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",15,null],[11,"bitand","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",15,null],[11,"add","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",15,null],[11,"sub","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",15,null],[11,"mul","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",15,null],[11,"div","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",15,null],[11,"rem","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",15,null],[11,"not","","",15,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",15,null],[11,"bitor","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",15,null],[11,"bitand","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",15,null],[11,"add","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",15,null],[11,"sub","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",15,null],[11,"mul","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",15,null],[11,"div","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",15,null],[11,"rem","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",15,null],[11,"not","","",15,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",15,null],[11,"bitor","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",15,null],[11,"bitand","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",15,null],[11,"add","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",15,null],[11,"sub","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",15,null],[11,"mul","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",15,null],[11,"div","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",15,null],[11,"rem","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",15,null],[11,"not","","",15,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",15,null],[11,"bitor","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",15,null],[11,"bitand","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",15,null],[11,"add","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",15,null],[11,"sub","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",15,null],[11,"mul","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",15,null],[11,"div","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",15,null],[11,"rem","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",15,null],[11,"not","","",15,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",15,null],[11,"bitor","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",15,null],[11,"bitand","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",15,null],[11,"add","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",15,null],[11,"sub","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",15,null],[11,"mul","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",15,null],[11,"div","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",15,null],[11,"rem","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",15,null],[11,"not","","",15,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",15,null],[11,"bitor","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",15,null],[11,"bitand","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",15,null],[11,"add","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",15,null],[11,"sub","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",15,null],[11,"mul","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",15,null],[11,"div","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",15,null],[11,"rem","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",15,null],[11,"not","","",15,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",15,null],[11,"bitor","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",15,null],[11,"bitand","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",15,null],[11,"add","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",15,null],[11,"sub","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",15,null],[11,"mul","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",15,null],[11,"div","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",15,null],[11,"rem","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",15,null],[11,"not","","",15,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",15,null],[11,"bitor","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",15,null],[11,"bitand","","",15,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",15,null],[11,"clone","std::thread::local","",16,{"inputs":[{"name":"localkeystate"}],"output":{"name":"localkeystate"}}],[11,"eq","","",16,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"with","","Acquires a reference to the value in this TLS key.",17,{"inputs":[{"name":"localkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"state","","Query the current state of this key.",17,{"inputs":[{"name":"localkey"}],"output":{"name":"localkeystate"}}],[11,"new","std::thread::local::elf","",18,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"get","","",18,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[11,"new","std::thread::local::os","",19,{"inputs":[{"name":"key"}],"output":{"name":"key"}}],[11,"get","","",19,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[11,"set","std::thread::scoped_tls","Inserts a value into this scoped thread local storage slot for a\nduration of a closure.",20,{"inputs":[{"name":"scopedkey"},{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[11,"with","","Gets a value out of this scoped variable.",20,{"inputs":[{"name":"scopedkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",20,{"inputs":[{"name":"scopedkey"}],"output":{"name":"bool"}}],[11,"new","std::thread::scoped_tls::imp","",21,{"inputs":[{"name":"keyinner"}],"output":{"name":"keyinner"}}],[11,"set","","",21,null],[11,"get","","",21,null],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",22,{"inputs":[{"name":"builder"}],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",22,{"inputs":[{"name":"builder"},{"name":"string"}],"output":{"name":"builder"}}],[11,"stack_size","","Sets the size of the stack for the new thread.",22,{"inputs":[{"name":"builder"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",22,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"thread"}],"output":{"name":"thread"}}],[11,"unpark","","Atomically makes the handle's token available if it is not already.",23,null],[11,"name","","Gets the thread's name.",23,{"inputs":[{"name":"thread"}],"output":{"name":"option"}}],[11,"fmt","","",23,{"inputs":[{"name":"thread"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",23,{"inputs":[{"name":"thread"},{"name":"option"}],"output":{"name":"thread"}}],[11,"thread","","Extracts a handle to the underlying thread",24,{"inputs":[{"name":"joinhandle"}],"output":{"name":"thread"}}],[11,"join","","Waits for the associated thread to finish.",24,{"inputs":[{"name":"joinhandle"}],"output":{"name":"result"}}],[11,"clone","std::collections::hash::table","",25,{"inputs":[{"name":"rawbucket"}],"output":{"name":"rawbucket"}}],[11,"clone","","",26,{"inputs":[{"name":"bucket"}],"output":{"name":"bucket"}}],[11,"clone","","",27,{"inputs":[{"name":"safehash"}],"output":{"name":"safehash"}}],[11,"eq","","",27,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"inspect","","Peek at the hash value, which is guaranteed to be non-zero.",27,{"inputs":[{"name":"safehash"}],"output":{"name":"u64"}}],[11,"table","","Borrow a reference to the table.",28,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",28,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",28,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"table","","Borrow a reference to the table.",29,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",29,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",26,{"inputs":[{"name":"bucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",26,{"inputs":[{"name":"bucket"}],"output":{"name":"usize"}}],[11,"new","","",26,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"safehash"}],"output":{"name":"bucket"}}],[11,"at_index","","",26,{"inputs":[{"name":"bucket"},{"name":"m"},{"name":"usize"}],"output":{"name":"bucket"}}],[11,"first","","",26,{"inputs":[{"name":"bucket"},{"name":"m"}],"output":{"name":"bucket"}}],[11,"peek","","Reads a bucket at a given index, returning an enum indicating whether\nit's initialized or not. You need to match on this enum to get\nthe appropriate types to call most of the other functions in\nthis module.",26,{"inputs":[{"name":"bucket"}],"output":{"name":"bucketstate"}}],[11,"next","","Modifies the bucket pointer in place to make it point to the next slot.",26,null],[11,"next","","",29,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",29,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"gap_peek","","",29,{"inputs":[{"name":"emptybucket"}],"output":{"name":"option"}}],[11,"put","","Puts given key and value pair, along with the key's hash,\ninto this bucket in the hashtable. Note how `self` is 'moved' into\nthis function, because this slot will no longer be empty when\nwe return! A `FullBucket` is returned for later use, pointing to\nthe newly-filled slot in the hashtable.",29,{"inputs":[{"name":"emptybucket"},{"name":"safehash"},{"name":"k"},{"name":"v"}],"output":{"name":"fullbucket"}}],[11,"next","","",28,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",28,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"distance","","Get the distance between this bucket and the 'ideal' location\nas determined by the key's hash stored in it.",28,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"hash","","",28,{"inputs":[{"name":"fullbucket"}],"output":{"name":"safehash"}}],[11,"read","","Gets references to the key and value at a given index.",28,null],[11,"take","","Removes this bucket's key and value from the hashtable.",28,null],[11,"replace","","",28,null],[11,"read_mut","","Gets mutable references to the key and value at a given index.",28,null],[11,"into_refs","","Exchange a bucket state for immutable references into the table.\nBecause the underlying reference to the table is also consumed,\nno further changes to the structure of the table are possible;\nin exchange for this, the returned references have a longer lifetime\nthan the references returned by `read()`.",28,null],[11,"into_mut_refs","","This works similarly to `into_refs`, exchanging a bucket state\nfor mutable references into the table.",28,null],[11,"expect_full","","",30,{"inputs":[{"name":"bucketstate"}],"output":{"name":"fullbucket"}}],[11,"full","","",31,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"fullbucket"}}],[11,"shift","","",31,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"option"}}],[11,"new","","Creates a new raw table from a given capacity. All buckets are\ninitially empty.",32,{"inputs":[{"name":"rawtable"},{"name":"usize"}],"output":{"name":"rawtable"}}],[11,"capacity","","The hashtable's capacity, similar to a vector's.",32,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"size","","The number of elements ever `put` in the hashtable, minus the number\nof elements ever `take`n.",32,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"iter","","",32,{"inputs":[{"name":"rawtable"}],"output":{"name":"iter"}}],[11,"iter_mut","","",32,{"inputs":[{"name":"rawtable"}],"output":{"name":"itermut"}}],[11,"into_iter","","",32,{"inputs":[{"name":"rawtable"}],"output":{"name":"intoiter"}}],[11,"drain","","",32,{"inputs":[{"name":"rawtable"}],"output":{"name":"drain"}}],[11,"clone","","",33,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"rawbuckets"}}],[11,"next","","",33,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"option"}}],[11,"next","","",34,{"inputs":[{"name":"revmovebuckets"}],"output":{"name":"option"}}],[11,"clone","","",35,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",35,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"len","","",35,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",36,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"len","","",36,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",37,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"len","","",37,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",38,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"len","","",38,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"drop","","",38,null],[11,"clone","","",32,{"inputs":[{"name":"rawtable"}],"output":{"name":"rawtable"}}],[11,"drop","","",32,null],[11,"clone","std::collections::hash::map","",39,{"inputs":[{"name":"defaultresizepolicy"}],"output":{"name":"defaultresizepolicy"}}],[11,"clone","","",40,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"new","","Creates an empty HashMap.",40,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",40,{"inputs":[{"name":"hashmap"},{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hasher","","Creates an empty hashmap which will use the given hash builder to hash\nkeys.",40,{"inputs":[{"name":"hashmap"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_hash_state","","Deprecated, renamed to `with_hasher`",40,{"inputs":[{"name":"hashmap"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hasher","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",40,{"inputs":[{"name":"hashmap"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hash_state","","Deprecated, renamed to `with_capacity_and_hasher`",40,{"inputs":[{"name":"hashmap"},{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",40,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",40,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",40,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&'a K`.",40,{"inputs":[{"name":"hashmap"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&'a V`.",40,{"inputs":[{"name":"hashmap"}],"output":{"name":"values"}}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&'a K, &'a V)`.",40,{"inputs":[{"name":"hashmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&'a K, &'a mut V)`.",40,{"inputs":[{"name":"hashmap"}],"output":{"name":"itermut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",40,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",40,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",40,{"inputs":[{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",40,{"inputs":[{"name":"hashmap"}],"output":{"name":"drain"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",40,null],[11,"get","","Returns a reference to the value corresponding to the key.",40,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",40,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",40,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",40,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",40,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",40,{"inputs":[{"name":"hashmap"},{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"fmt","","",40,{"inputs":[{"name":"hashmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",40,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"index","","",40,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",41,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",42,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",43,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",40,{"inputs":[{"name":"hashmap"}],"output":{"name":"intoiter"}}],[11,"next","","",41,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"len","","",41,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",44,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",44,null],[11,"len","","",44,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",45,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"len","","",45,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",42,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"len","","",42,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"next","","",43,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"len","","",43,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"next","","",46,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"len","","",46,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",47,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",47,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",48,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",48,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",48,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value",48,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",48,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it",49,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","","",40,{"inputs":[{"name":"hashmap"},{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",40,null],[11,"extend","","",40,null],[11,"clone","","",50,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",50,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"build_hasher","","",50,{"inputs":[{"name":"randomstate"}],"output":{"name":"siphasher"}}],[11,"default","","",50,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"get","","",40,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"take","","",40,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"replace","","",40,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"option"}}],[11,"clone","std::collections::hash::set","",5,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"eq","","",5,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"hashset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",5,{"inputs":[{"name":"hashset"},{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",5,null],[11,"extend","","",5,null],[11,"default","","",5,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",5,{"inputs":[{"name":"hashset"}],"output":{"name":"intoiter"}}],[11,"clone","","",51,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",51,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"len","","",51,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",52,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"len","","",52,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",53,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"len","","",53,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"clone","","",54,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",54,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"clone","","",55,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",55,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"clone","","",56,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",56,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"clone","","",57,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",57,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"hasher","std::collections::hash::state","",58,{"inputs":[{"name":"defaultstate"}],"output":{"name":"h"}}],[11,"clone","","",58,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"default","","",58,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"clone","collections::binary_heap","",59,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",59,null],[11,"default","","",59,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"fmt","","",59,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",59,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",59,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",59,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",59,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",59,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",59,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",59,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",59,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",59,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",59,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",59,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",59,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",59,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",59,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",59,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",59,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",59,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",59,null],[11,"drop","","",60,null],[11,"clone","","",61,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",61,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"next_back","","",61,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",62,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"next_back","","",62,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",63,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"next_back","","",63,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from","","",59,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",64,{"inputs":[{"name":"vec"},{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",59,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",59,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",59,null],[11,"extend","","",59,null],[11,"clone","collections::linked_list","",65,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",66,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",67,{"inputs":[{"name":"rawlink"},{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",67,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",68,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",68,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",68,null],[11,"iter","","Provides a forward iterator.",68,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",68,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",68,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",68,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",68,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",68,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",68,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",68,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",68,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",68,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",68,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",68,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",68,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",68,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drop","","",68,null],[11,"next","","",65,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"next_back","","",65,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",69,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"next_back","","",69,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",69,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",69,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",66,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"next_back","","",66,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",68,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",68,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",68,null],[11,"extend","","",68,null],[11,"eq","","",68,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",68,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",68,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",68,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",68,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",68,null],[11,"clone","collections::vec_deque","",70,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",70,null],[11,"default","","",70,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",70,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",70,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",70,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",70,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",70,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",70,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",70,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",70,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",70,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",70,null],[11,"iter","","Returns a front-to-back iterator.",70,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",70,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",70,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",70,null],[11,"len","","Returns the number of elements in the `VecDeque`.",70,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",70,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",70,{"inputs":[{"name":"vecdeque"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",70,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",70,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",70,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",70,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",70,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",70,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",70,null],[11,"push_back","","Appends an element to the back of a buffer",70,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",70,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",70,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",70,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",70,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",70,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",70,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",70,null],[11,"retain","","Retains only the elements specified by the predicate.",70,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",70,null],[11,"clone","","",71,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",71,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"next_back","","",71,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",72,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"next_back","","",72,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",73,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",73,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"next_back","","",73,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",74,null],[11,"next","","",74,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"next_back","","",74,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",70,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",70,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",70,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",70,null],[11,"index","","",70,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",70,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",70,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",70,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",70,null],[11,"extend","","",70,null],[11,"fmt","","",70,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","std::dynamic_lib","",75,null],[11,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",75,{"inputs":[{"name":"dynamiclibrary"},{"name":"option"}],"output":{"name":"result"}}],[11,"prepend_search_path","","Prepends a path to this process's search path for dynamic libraries",75,null],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",75,null],[11,"envvar","","Returns the environment variable for this process's dynamic library\nsearch path",75,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",75,{"inputs":[{"name":"dynamiclibrary"}],"output":{"name":"vec"}}],[11,"symbol","","Accesses the value at the symbol of the dynamic library.",75,{"inputs":[{"name":"dynamiclibrary"},{"name":"str"}],"output":{"name":"result"}}],[11,"next","std::env","",76,{"inputs":[{"name":"vars"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"next","","",77,{"inputs":[{"name":"varsos"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"clone","","",78,{"inputs":[{"name":"varerror"}],"output":{"name":"varerror"}}],[11,"eq","","",78,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"fmt","","",78,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",78,{"inputs":[{"name":"varerror"}],"output":{"name":"str"}}],[11,"next","","",79,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"fmt","","",80,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",80,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",81,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",81,null],[11,"len","","",81,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",82,{"inputs":[{"name":"argsos"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"len","","",82,{"inputs":[{"name":"argsos"}],"output":{"name":"usize"}}],[11,"clone","std::ffi::c_str","",83,{"inputs":[{"name":"cstring"}],"output":{"name":"cstring"}}],[11,"hash","","",83,null],[11,"cmp","","",83,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",83,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"option"}}],[11,"lt","","",83,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"le","","",83,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"gt","","",83,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ge","","",83,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"eq","","",83,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"hash","","",84,null],[11,"fmt","","",85,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",85,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"clone","","",85,{"inputs":[{"name":"nulerror"}],"output":{"name":"nulerror"}}],[11,"fmt","","",86,{"inputs":[{"name":"intostringerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",86,{"inputs":[{"name":"intostringerror"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"intostringerror"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"clone","","",86,{"inputs":[{"name":"intostringerror"}],"output":{"name":"intostringerror"}}],[11,"new","","Creates a new C-compatible string from a container of bytes.",83,{"inputs":[{"name":"cstring"},{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",83,{"inputs":[{"name":"cstring"},{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_raw","","Retakes ownership of a CString that was transferred to C.",83,null],[11,"into_raw","","Transfers ownership of the string to a C caller.",83,null],[11,"into_string","","Converts the `CString` into a `String` if it contains valid Unicode data.",83,{"inputs":[{"name":"cstring"}],"output":{"name":"result"}}],[11,"into_bytes","","Returns the underlying byte buffer.",83,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"into_bytes_with_nul","","Equivalent to the `into_bytes` function except that the returned vector\nincludes the trailing nul byte.",83,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",83,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",83,null],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",84,null],[11,"as_ptr","","Returns the inner pointer to this C string.",84,null],[11,"to_bytes","","Converts this C string to a byte slice.",84,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",84,null],[11,"to_str","","Yields a `&str` slice if the `CStr` contains valid UTF-8.",84,{"inputs":[{"name":"cstr"}],"output":{"name":"result"}}],[11,"to_string_lossy","","Converts a `CStr` into a `Cow<str>`.",84,{"inputs":[{"name":"cstr"}],"output":{"name":"cow"}}],[11,"deref","","",83,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"fmt","","",83,{"inputs":[{"name":"cstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","collections::vec","",64,{"inputs":[{"name":"vec"},{"name":"cstring"}],"output":{"name":"vec"}}],[11,"fmt","std::ffi::c_str","",84,{"inputs":[{"name":"cstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",83,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::new`.",85,{"inputs":[{"name":"nulerror"}],"output":{"name":"usize"}}],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",85,{"inputs":[{"name":"nulerror"}],"output":{"name":"vec"}}],[11,"description","","",85,{"inputs":[{"name":"nulerror"}],"output":{"name":"str"}}],[11,"fmt","","",85,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",87,{"inputs":[{"name":"error"},{"name":"nulerror"}],"output":{"name":"error"}}],[11,"into_cstring","std::ffi::c_str","Consumes this error, returning original `CString` which generated the\nerror.",86,{"inputs":[{"name":"intostringerror"}],"output":{"name":"cstring"}}],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of this error.",86,{"inputs":[{"name":"intostringerror"}],"output":{"name":"utf8error"}}],[11,"description","","",86,{"inputs":[{"name":"intostringerror"}],"output":{"name":"str"}}],[11,"cause","","",86,{"inputs":[{"name":"intostringerror"}],"output":{"name":"option"}}],[11,"fmt","","",86,{"inputs":[{"name":"intostringerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",84,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",84,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"option"}}],[11,"cmp","","",84,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"ordering"}}],[11,"to_owned","","",84,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"from","","",83,{"inputs":[{"name":"cstring"},{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"index","","",83,{"inputs":[{"name":"cstring"},{"name":"rangefull"}],"output":{"name":"cstr"}}],[11,"as_ref","","",84,{"inputs":[{"name":"cstr"}],"output":{"name":"cstr"}}],[11,"as_ref","","",83,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"clone","std::ffi::os_str","",88,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"new","","Constructs a new empty `OsString`.",88,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"from_bytes","","Constructs an `OsString` from a byte sequence.",88,{"inputs":[{"name":"osstring"},{"name":"b"}],"output":{"name":"option"}}],[11,"as_os_str","","Converts to an `OsStr` slice.",88,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"into_string","","Converts the `OsString` into a `String` if it contains valid Unicode data.",88,{"inputs":[{"name":"osstring"}],"output":{"name":"result"}}],[11,"push","","Extends the string with the given `&OsStr` slice.",88,null],[11,"from","","",88,{"inputs":[{"name":"osstring"},{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",88,{"inputs":[{"name":"osstring"},{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",88,{"inputs":[{"name":"osstring"},{"name":"rangefull"}],"output":{"name":"osstr"}}],[11,"new","","Coerces into an `OsStr` slice.",89,{"inputs":[{"name":"osstr"},{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `OsStr` is valid unicode.",89,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts an `OsStr` to a `Cow<str>`.",89,{"inputs":[{"name":"osstr"}],"output":{"name":"cow"}}],[11,"to_os_string","","Copies the slice into an owned `OsString`.",89,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"to_bytes","","Yields this `OsStr` as a byte slice.",89,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_cstring","","Creates a `CString` containing this `OsStr` data.",89,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"deref","","",88,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"fmt","","",88,{"inputs":[{"name":"osstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",88,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",88,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",88,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"lt","","",88,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"le","","",88,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"gt","","",88,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"ge","","",88,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",88,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",88,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"ordering"}}],[11,"hash","","",88,null],[11,"eq","","",89,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",89,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",89,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"lt","","",89,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"le","","",89,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"gt","","",89,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"ge","","",89,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",89,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",89,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"ordering"}}],[11,"hash","","",89,null],[11,"fmt","","",89,{"inputs":[{"name":"osstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",88,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"to_owned","","",89,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"as_ref","","",89,{"inputs":[{"name":"osstr"}],"output":{"name":"osstr"}}],[11,"as_ref","","",88,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"as_ref","collections::string","",90,{"inputs":[{"name":"string"}],"output":{"name":"osstr"}}],[11,"clone","std::fs","",91,{"inputs":[{"name":"metadata"}],"output":{"name":"metadata"}}],[11,"clone","","",92,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",93,{"inputs":[{"name":"permissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",93,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"clone","","",93,{"inputs":[{"name":"permissions"}],"output":{"name":"permissions"}}],[11,"hash","","",94,null],[11,"eq","","",94,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",94,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"open","","Attempts to open a file in read-only mode.",95,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",95,{"inputs":[{"name":"file"},{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",95,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",95,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",95,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"metadata","","Queries metadata about the underlying file.",95,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",95,null],[11,"read_to_end","","",95,{"inputs":[{"name":"file"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",95,null],[11,"flush","","",95,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",95,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"new","","Creates a blank net set of options ready for configuration.",92,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",92,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"write","","Sets the option for write access.",92,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"append","","Sets the option for the append mode.",92,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"truncate","","Sets the option for truncating a previous file.",92,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create","","Sets the option for creating a new file.",92,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"open","","Opens a file at `path` with the options specified by `self`.",92,{"inputs":[{"name":"openoptions"},{"name":"p"}],"output":{"name":"result"}}],[11,"file_type","","Returns the file type for this metadata.",91,{"inputs":[{"name":"metadata"}],"output":{"name":"filetype"}}],[11,"is_dir","","Returns whether this metadata is for a directory.",91,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether this metadata is for a regular file.",91,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",91,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"permissions","","Returns the permissions of the file this metadata is for.",91,{"inputs":[{"name":"metadata"}],"output":{"name":"permissions"}}],[11,"readonly","","Returns whether these permissions describe a readonly file.",93,{"inputs":[{"name":"permissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","Modifies the readonly flag for this set of permissions.",93,null],[11,"is_dir","","Test whether this file type represents a directory.",94,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","Test whether this file type represents a regular file.",94,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","Test whether this file type represents a symbolic link.",94,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"next","","",96,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"path","","Returns the full path to the file that this entry represents.",97,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"metadata","","Return the metadata for the file that this entry points at.",97,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","Return the file type for the file that this entry points at.",97,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_name","","Returns the bare file name of this directory entry without any other\nleading path component.",97,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"next","","",98,{"inputs":[{"name":"walkdir"}],"output":{"name":"option"}}],[11,"new","","Creates a new set of options with default mode/security settings for all\nplatforms and also non-recursive.",99,{"inputs":[{"name":"dirbuilder"}],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicate that directories create should be created recursively, creating\nall parent directories if they do not exist with the same security and\npermissions settings.",99,{"inputs":[{"name":"dirbuilder"},{"name":"bool"}],"output":{"name":"dirbuilder"}}],[11,"create","","Create the specified directory with the options configured in this\nbuilder.",99,{"inputs":[{"name":"dirbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"new","std::io::buffered","Creates a new `BufReader` with a default buffer capacity.",100,{"inputs":[{"name":"bufreader"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity.",100,{"inputs":[{"name":"bufreader"},{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",100,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying reader.",100,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",100,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"read","","",100,null],[11,"fill_buf","","",100,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[11,"consume","","",100,null],[11,"fmt","","",100,{"inputs":[{"name":"bufreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",100,{"inputs":[{"name":"bufreader"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `BufWriter` with a default buffer capacity.",102,{"inputs":[{"name":"bufwriter"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity.",102,{"inputs":[{"name":"bufwriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",102,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",102,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",102,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"write","","",102,null],[11,"flush","","",102,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"bufwriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",102,{"inputs":[{"name":"bufwriter"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"drop","","",102,null],[11,"error","","Returns the error which caused the call to `into_inner()` to fail.",101,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"into_inner","","Returns the buffered writer instance which generated the error.",101,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"w"}}],[11,"from","std::io::error","",87,{"inputs":[{"name":"error"},{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","std::io::buffered","",101,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"str"}}],[11,"fmt","","",101,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `LineWriter`.",103,{"inputs":[{"name":"linewriter"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal\nbuffer.",103,{"inputs":[{"name":"linewriter"},{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",103,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",103,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",103,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"write","","",103,null],[11,"flush","","",103,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"linewriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::io::cursor","",104,{"inputs":[{"name":"cursor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"cursor"}],"output":{"name":"cursor"}}],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",104,{"inputs":[{"name":"cursor"},{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",104,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",104,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",104,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"position","","Returns the current position of this cursor.",104,{"inputs":[{"name":"cursor"}],"output":{"name":"u64"}}],[11,"set_position","","Sets the position of this cursor.",104,null],[11,"seek","","",104,{"inputs":[{"name":"cursor"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"read","","",104,null],[11,"fill_buf","","",104,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"consume","","",104,null],[11,"write","","",104,null],[11,"flush","","",104,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"write","","",104,null],[11,"flush","","",104,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"write","","",104,null],[11,"flush","","",104,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"fmt","std::io::error","",87,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"custom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"eq","","",106,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"new","","Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.",87,{"inputs":[{"name":"error"},{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",87,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",87,{"inputs":[{"name":"error"},{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",87,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",87,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error\n(if any).",87,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",87,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",87,{"inputs":[{"name":"error"}],"output":{"name":"errorkind"}}],[11,"fmt","","",107,{"inputs":[{"name":"repr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",87,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",87,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"read","alloc::boxed","",6,null],[11,"read_to_end","","",6,{"inputs":[{"name":"box"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",6,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",6,null],[11,"write","","",6,null],[11,"flush","","",6,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"write_all","","",6,null],[11,"write_fmt","","",6,{"inputs":[{"name":"box"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"seek","","",6,{"inputs":[{"name":"box"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fill_buf","","",6,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"consume","","",6,null],[11,"read_until","","",6,{"inputs":[{"name":"box"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","",6,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"write","collections::vec","",64,null],[11,"write_all","","",64,null],[11,"flush","","",64,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"new","std::io::lazy","",108,null],[11,"get","","",108,{"inputs":[{"name":"lazy"}],"output":{"name":"option"}}],[11,"read","std::io::util","",109,null],[11,"fill_buf","","",109,{"inputs":[{"name":"empty"}],"output":{"name":"result"}}],[11,"consume","","",109,null],[11,"read","","",110,null],[11,"write","","",111,null],[11,"flush","","",111,{"inputs":[{"name":"sink"}],"output":{"name":"result"}}],[11,"read","std::io::stdio","",112,null],[11,"write","","",113,null],[11,"flush","","",113,{"inputs":[{"name":"stdoutraw"}],"output":{"name":"result"}}],[11,"write","","",114,null],[11,"flush","","",114,{"inputs":[{"name":"stderrraw"}],"output":{"name":"result"}}],[11,"write","","",115,null],[11,"flush","","",115,{"inputs":[{"name":"maybe"}],"output":{"name":"result"}}],[11,"read","","",115,null],[11,"lock","","Locks this handle to the standard input stream, returning a readable\nguard.",116,{"inputs":[{"name":"stdin"}],"output":{"name":"stdinlock"}}],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",116,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read","","",116,null],[11,"read_to_end","","",116,{"inputs":[{"name":"stdin"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",116,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",116,null],[11,"read","","",117,null],[11,"read_to_end","","",117,{"inputs":[{"name":"stdinlock"},{"name":"vec"}],"output":{"name":"result"}}],[11,"fill_buf","","",117,{"inputs":[{"name":"stdinlock"}],"output":{"name":"result"}}],[11,"consume","","",117,null],[11,"lock","","Locks this handle to the standard output stream, returning a writable\nguard.",118,{"inputs":[{"name":"stdout"}],"output":{"name":"stdoutlock"}}],[11,"write","","",118,null],[11,"flush","","",118,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write_all","","",118,null],[11,"write_fmt","","",118,{"inputs":[{"name":"stdout"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",119,null],[11,"flush","","",119,{"inputs":[{"name":"stdoutlock"}],"output":{"name":"result"}}],[11,"lock","","Locks this handle to the standard error stream, returning a writable\nguard.",120,{"inputs":[{"name":"stderr"}],"output":{"name":"stderrlock"}}],[11,"write","","",120,null],[11,"flush","","",120,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write_all","","",120,null],[11,"write_fmt","","",120,{"inputs":[{"name":"stderr"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",121,null],[11,"flush","","",121,{"inputs":[{"name":"stderrlock"}],"output":{"name":"result"}}],[11,"fmt","std::io","",122,{"inputs":[{"name":"seekfrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",122,{"inputs":[{"name":"seekfrom"}],"output":{"name":"seekfrom"}}],[11,"eq","","",122,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"write","","",123,null],[11,"flush","","",123,{"inputs":[{"name":"broadcast"}],"output":{"name":"result"}}],[11,"read","","",124,null],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",125,{"inputs":[{"name":"take"}],"output":{"name":"u64"}}],[11,"read","","",125,null],[11,"fill_buf","","",125,{"inputs":[{"name":"take"}],"output":{"name":"result"}}],[11,"consume","","",125,null],[11,"read","","",126,null],[11,"next","","",127,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"fmt","","",128,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",129,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"description","","",128,{"inputs":[{"name":"charserror"}],"output":{"name":"str"}}],[11,"cause","","",128,{"inputs":[{"name":"charserror"}],"output":{"name":"option"}}],[11,"fmt","","",128,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",130,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next","","",131,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"cmp","std::net::ip","",132,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",132,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"option"}}],[11,"lt","","",132,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"le","","",132,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"gt","","",132,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ge","","",132,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"hash","","",132,null],[11,"fmt","","",132,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",132,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"clone","","",132,{"inputs":[{"name":"ipaddr"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",133,{"inputs":[{"name":"ipv6multicastscope"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",133,null],[11,"clone","","",133,{"inputs":[{"name":"ipv6multicastscope"}],"output":{"name":"ipv6multicastscope"}}],[11,"eq","","",133,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",134,{"inputs":[{"name":"ipv4addr"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",134,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address 0.0.0.0.",134,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8).",134,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_private","","Returns true if this is a private address.",134,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16).",134,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",134,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns true if this is a multicast address.",134,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_broadcast","","Returns true if this is a broadcast address.",134,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns true if this address is in a range designated for documentation.",134,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible IPv6 address.",134,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped IPv6 address.",134,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",132,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",134,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",134,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",134,null],[11,"partial_cmp","","",134,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"option"}}],[11,"cmp","","",134,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"ordering"}}],[11,"from","","",134,{"inputs":[{"name":"ipv4addr"},{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",135,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",135,null],[11,"is_unspecified","","Returns true for the special 'unspecified' address ::.",135,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (::1).",135,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",135,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unique_local","","Returns true if this is a unique local address (IPv6).",135,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10).",135,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address (IPv6\nfec0::/10).",135,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address.",135,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"multicast_scope","","Returns the address's multicast scope if the address is multicast.",135,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"is_multicast","","Returns true if this is a multicast address.",135,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"to_ipv4","","Converts this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",135,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"fmt","","",135,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",135,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"eq","","",135,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"hash","","",135,null],[11,"partial_cmp","","",135,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"cmp","","",135,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"ordering"}}],[11,"fmt","std::net::addr","",136,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",136,null],[11,"eq","","",136,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"clone","","",136,{"inputs":[{"name":"socketaddr"}],"output":{"name":"socketaddr"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",136,{"inputs":[{"name":"socketaddr"},{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",136,{"inputs":[{"name":"socketaddr"}],"output":{"name":"ipaddr"}}],[11,"port","","Returns the port number associated with this socket address.",136,{"inputs":[{"name":"socketaddr"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",137,{"inputs":[{"name":"socketaddrv4"},{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",137,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"ipv4addr"}}],[11,"port","","Returns the port number associated with this socket address.",137,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"u16"}}],[11,"new","","Creates a new socket address from the ip/port/flowinfo/scope_id\ncomponents.",138,{"inputs":[{"name":"socketaddrv6"},{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",138,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"ipv6addr"}}],[11,"port","","Returns the port number associated with this socket address.",138,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u16"}}],[11,"flowinfo","","Returns the flow information associated with this address,\ncorresponding to the `sin6_flowinfo` field in C.",138,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"scope_id","","Returns the scope ID associated with this address,\ncorresponding to the `sin6_scope_id` field in C.",138,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"fmt","","",136,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",137,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",137,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",138,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",138,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",137,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"socketaddrv4"}}],[11,"clone","","",138,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"socketaddrv6"}}],[11,"eq","","",137,{"inputs":[{"name":"socketaddrv4"},{"name":"socketaddrv4"}],"output":{"name":"bool"}}],[11,"eq","","",138,{"inputs":[{"name":"socketaddrv6"},{"name":"socketaddrv6"}],"output":{"name":"bool"}}],[11,"hash","","",137,null],[11,"hash","","",138,null],[11,"to_socket_addrs","","",136,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",137,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",138,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"result"}}],[11,"connect","std::net::tcp","Opens a TCP connection to a remote host.",139,{"inputs":[{"name":"tcpstream"},{"name":"a"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",139,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",139,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",139,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",139,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",139,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",139,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",139,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",139,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",139,null],[11,"read_to_end","","",139,{"inputs":[{"name":"tcpstream"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",139,null],[11,"flush","","",139,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",140,{"inputs":[{"name":"tcplistener"},{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",140,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",140,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","Accept a new incoming connection from this listener.",140,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",140,{"inputs":[{"name":"tcplistener"}],"output":{"name":"incoming"}}],[11,"next","","",141,{"inputs":[{"name":"incoming"}],"output":{"name":"option"}}],[11,"fmt","","",140,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","std::net::udp","Creates a UDP socket from the given address.",142,{"inputs":[{"name":"udpsocket"},{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",142,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",142,null],[11,"local_addr","","Returns the socket address that this socket was created from.",142,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",142,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",142,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",142,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",142,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",142,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","std::net::ip","",132,{"inputs":[{"name":"ipaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",134,{"inputs":[{"name":"ipv4addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",135,{"inputs":[{"name":"ipv6addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","std::net::addr","",137,{"inputs":[{"name":"socketaddrv4"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",138,{"inputs":[{"name":"socketaddrv6"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",136,{"inputs":[{"name":"socketaddr"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","std::net::parser","",143,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"clone","","",143,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"addrparseerror"}}],[11,"fmt","","",143,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",143,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"str"}}],[11,"fmt","std::net","",144,{"inputs":[{"name":"shutdown"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",144,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"clone","","",144,{"inputs":[{"name":"shutdown"}],"output":{"name":"shutdown"}}],[11,"next","","",145,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"clone","std::os::linux::raw::arch","",146,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"as_raw_fd","std::fs","",95,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",95,{"inputs":[{"name":"file"},{"name":"i32"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",95,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::tcp","",139,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",140,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::udp","",142,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_raw_fd","std::net::tcp","",139,{"inputs":[{"name":"tcpstream"},{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",140,{"inputs":[{"name":"tcplistener"},{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","std::net::udp","",142,{"inputs":[{"name":"udpsocket"},{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"into_raw_fd","std::net::tcp","",139,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",140,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"into_raw_fd","std::net::udp","",142,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_vec","std::ffi::os_str","",88,{"inputs":[{"name":"osstring"},{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",88,{"inputs":[{"name":"osstring"}],"output":{"name":"vec"}}],[11,"from_bytes","","",89,null],[11,"as_bytes","","",89,null],[11,"mode","std::fs","",93,{"inputs":[{"name":"permissions"}],"output":{"name":"u32"}}],[11,"set_mode","","",93,null],[11,"from_mode","","",93,{"inputs":[{"name":"permissions"},{"name":"u32"}],"output":{"name":"permissions"}}],[11,"mode","","",92,{"inputs":[{"name":"openoptions"},{"name":"u32"}],"output":{"name":"openoptions"}}],[11,"dev","","",91,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"ino","","",91,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"mode","","",91,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"nlink","","",91,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"uid","","",91,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"gid","","",91,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"rdev","","",91,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"size","","",91,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"atime","","",91,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"atime_nsec","","",91,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime","","",91,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime_nsec","","",91,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime","","",91,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime_nsec","","",91,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"blksize","","",91,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"blocks","","",91,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"is_block_device","","",94,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_char_device","","",94,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_fifo","","",94,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_socket","","",94,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ino","","",97,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"mode","","",99,{"inputs":[{"name":"dirbuilder"},{"name":"u32"}],"output":{"name":"dirbuilder"}}],[11,"uid","std::process","",147,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"gid","","",147,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"session_leader","","",147,{"inputs":[{"name":"command"},{"name":"bool"}],"output":{"name":"command"}}],[11,"signal","","",148,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"from_raw_fd","","",149,{"inputs":[{"name":"stdio"},{"name":"i32"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",150,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",151,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",152,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",150,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",151,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",152,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"as_pthread_t","std::thread","",24,{"inputs":[{"name":"joinhandle"}],"output":{"name":"u64"}}],[11,"into_pthread_t","","",24,{"inputs":[{"name":"joinhandle"}],"output":{"name":"u64"}}],[11,"new","std::panic","Creates a new `AssertRecoverSafe` wrapper around the provided type.",153,{"inputs":[{"name":"assertrecoversafe"},{"name":"t"}],"output":{"name":"assertrecoversafe"}}],[11,"deref","","",153,{"inputs":[{"name":"assertrecoversafe"}],"output":{"name":"t"}}],[11,"deref_mut","","",153,{"inputs":[{"name":"assertrecoversafe"}],"output":{"name":"t"}}],[11,"eq","std::path","",154,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"cmp","","",154,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",154,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"option"}}],[11,"lt","","",154,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"le","","",154,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"gt","","",154,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ge","","",154,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"hash","","",154,null],[11,"fmt","","",154,{"inputs":[{"name":"prefix"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",154,{"inputs":[{"name":"prefix"}],"output":{"name":"prefix"}}],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.",154,{"inputs":[{"name":"prefix"}],"output":{"name":"bool"}}],[11,"fmt","","",155,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",155,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"option"}}],[11,"lt","","",155,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"le","","",155,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"gt","","",155,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ge","","",155,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"eq","","",155,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",155,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"fmt","","",156,{"inputs":[{"name":"prefixcomponent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",156,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefixcomponent"}}],[11,"kind","","The parsed prefix data.",156,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefix"}}],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",156,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"osstr"}}],[11,"eq","","",156,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",156,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"option"}}],[11,"cmp","","",156,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"ordering"}}],[11,"hash","","",156,null],[11,"fmt","","",157,{"inputs":[{"name":"component"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",157,null],[11,"cmp","","",157,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",157,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"option"}}],[11,"lt","","",157,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"le","","",157,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"gt","","",157,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ge","","",157,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"eq","","",157,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"clone","","",157,{"inputs":[{"name":"component"}],"output":{"name":"component"}}],[11,"as_os_str","","Extracts the underlying `OsStr` slice",157,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"as_ref","","",157,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"clone","","",158,{"inputs":[{"name":"components"}],"output":{"name":"components"}}],[11,"clone","","",159,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",158,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"peek","","Examine the next component without consuming it.",158,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"as_ref","","",158,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"as_ref","","",158,{"inputs":[{"name":"components"}],"output":{"name":"osstr"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",159,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",159,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",159,{"inputs":[{"name":"iter"}],"output":{"name":"osstr"}}],[11,"next","","",159,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",159,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",158,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"next_back","","",158,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"eq","","",158,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",158,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"option"}}],[11,"cmp","","",158,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"ordering"}}],[11,"clone","","",160,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"new","","Allocates an empty `PathBuf`.",160,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a `Path` slice.",160,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"push","","Extends `self` with `path`.",160,null],[11,"pop","","Truncate `self` to `self.parent()`.",160,{"inputs":[{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",160,null],[11,"set_extension","","Updates `self.extension()` to `extension`.",160,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"bool"}}],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal `OsString` storage.",160,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"from","","",160,{"inputs":[{"name":"pathbuf"},{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",160,{"inputs":[{"name":"pathbuf"},{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","","",160,{"inputs":[{"name":"pathbuf"},{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",160,{"inputs":[{"name":"pathbuf"},{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",160,null],[11,"fmt","","",160,{"inputs":[{"name":"pathbuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Directly wrap a string slice as a `Path` slice.",161,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying `OsStr` slice.",161,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&str` slice if the `Path` is valid unicode.",161,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts a `Path` to a `Cow<str>`.",161,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"to_path_buf","","Converts a `Path` to an owned `PathBuf`.",161,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",161,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_relative","","A path is *relative* if it is not absolute.",161,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"prefix","","Returns the *prefix* of a path, if any.",161,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",161,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"parent","","The path without its final component, if any.",161,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"file_name","","The final component of the path, if it is a normal file.",161,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"relative_from","","Returns a path that, when joined onto `base`, yields `self`.",161,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"option"}}],[11,"strip_prefix","","Returns a path that, when joined onto `base`, yields `self`.",161,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"result"}}],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",161,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",161,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"file_stem","","Extracts the stem (non-extension) portion of `self.file_name()`.",161,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"extension","","Extracts the extension of `self.file_name()`, if possible.",161,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",161,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"pathbuf"}}],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",161,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",161,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"components","","Produce an iterator over the components of the path.",161,{"inputs":[{"name":"path"}],"output":{"name":"components"}}],[11,"iter","","Produce an iterator over the path's components viewed as `OsStr` slices.",161,{"inputs":[{"name":"path"}],"output":{"name":"iter"}}],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",161,{"inputs":[{"name":"path"}],"output":{"name":"display"}}],[11,"metadata","","Gets information on the file, directory, etc at this path.",161,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"symlink_metadata","","Gets information on the file, directory, etc at this path.",161,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"canonicalize","","Returns the canonical form of a path, normalizing all components and\neliminate all symlinks.",161,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_link","","Reads the symlink at this path.",161,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_dir","","Reads the directory at this path.",161,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"exists","","Boolean value indicator whether the underlying file exists on the local\nfilesystem. Returns false in exactly the cases where `fs::metadata`\nfails.",161,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_file","","Whether the underlying implementation (be it a file path, or something\nelse) points at a \"regular file\" on the FS. Will return false for paths\nto non-existent locations or directories or other non-regular files\n(named pipes, etc). Follows links when making this determination.",161,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_dir","","Whether the underlying implementation (be it a file path, or something\nelse) is pointing at a directory in the underlying FS. Will return\nfalse for paths to non-existent locations or if the item is not a\ndirectory (eg files, named pipes, etc). Follows links when making this\ndetermination.",161,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"deref","","",160,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"borrow","","",160,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"into_cow","","",160,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"from","collections::borrow","",162,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"cow"}}],[11,"from","","",162,{"inputs":[{"name":"cow"},{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","std::path","",161,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"eq","","",160,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"hash","","",160,null],[11,"partial_cmp","","",160,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"cmp","","",160,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"ordering"}}],[11,"as_ref","","",160,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstr"}}],[11,"into","","",160,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"eq","","",163,{"inputs":[{"name":"stripprefixerror"},{"name":"stripprefixerror"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"stripprefixerror"},{"name":"stripprefixerror"}],"output":{"name":"bool"}}],[11,"clone","","",163,{"inputs":[{"name":"stripprefixerror"}],"output":{"name":"stripprefixerror"}}],[11,"fmt","","",163,{"inputs":[{"name":"stripprefixerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",161,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"fmt","","",161,{"inputs":[{"name":"path"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",161,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",161,null],[11,"partial_cmp","","",161,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"option"}}],[11,"cmp","","",161,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"ordering"}}],[11,"as_ref","","",161,{"inputs":[{"name":"path"}],"output":{"name":"path"}}],[11,"as_ref","std::ffi::os_str","",89,{"inputs":[{"name":"osstr"}],"output":{"name":"path"}}],[11,"as_ref","","",88,{"inputs":[{"name":"osstring"}],"output":{"name":"path"}}],[11,"as_ref","collections::string","",90,{"inputs":[{"name":"string"}],"output":{"name":"path"}}],[11,"as_ref","std::path","",160,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"eq","","",160,{"inputs":[{"name":"pathbuf"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",161,{"inputs":[{"name":"path"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","","",160,{"inputs":[{"name":"pathbuf"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",162,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","std::path","",161,{"inputs":[{"name":"path"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",162,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",162,{"inputs":[{"name":"cow"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","std::path","",160,{"inputs":[{"name":"pathbuf"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"fmt","","",163,{"inputs":[{"name":"stripprefixerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",163,{"inputs":[{"name":"stripprefixerror"}],"output":{"name":"str"}}],[11,"write","std::process","",150,null],[11,"flush","","",150,{"inputs":[{"name":"childstdin"}],"output":{"name":"result"}}],[11,"read","","",151,null],[11,"read","","",152,null],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",147,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",147,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"args","","Add multiple arguments to pass to the program.",147,null],[11,"env","","Inserts or updates an environment variable mapping.",147,{"inputs":[{"name":"command"},{"name":"k"},{"name":"v"}],"output":{"name":"command"}}],[11,"env_remove","","Removes an environment variable mapping.",147,{"inputs":[{"name":"command"},{"name":"k"}],"output":{"name":"command"}}],[11,"env_clear","","Clears the entire environment map for the child process.",147,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"current_dir","","Sets the working directory for the child process.",147,{"inputs":[{"name":"command"},{"name":"p"}],"output":{"name":"command"}}],[11,"stdin","","Configuration for the child process's stdin handle (file descriptor 0).",147,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stdout","","Configuration for the child process's stdout handle (file descriptor 1).",147,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stderr","","Configuration for the child process's stderr handle (file descriptor 2).",147,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"spawn","","Executes the command as a child process, returning a handle to it.",147,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",147,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",147,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",147,{"inputs":[{"name":"command"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",165,{"inputs":[{"name":"output"}],"output":{"name":"output"}}],[11,"eq","","",165,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"fmt","","",165,{"inputs":[{"name":"output"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",149,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",149,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",149,{"inputs":[{"name":"stdio"}],"output":{"name":"stdio"}}],[11,"fmt","","",148,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",148,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",148,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",148,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",148,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","Returns the exit code of the process, if any.",148,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",148,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",166,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"id","","Returns the OS-assigned process identifier associated with this child.",166,{"inputs":[{"name":"child"}],"output":{"name":"u32"}}],[11,"wait","","Waits for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",166,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning an `Output`\ninstance.",166,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"clone","std::sync::mpsc::blocking","",167,{"inputs":[{"name":"signaltoken"}],"output":{"name":"signaltoken"}}],[11,"signal","","",167,{"inputs":[{"name":"signaltoken"}],"output":{"name":"bool"}}],[11,"cast_to_usize","","Convert to an unsafe usize value. Useful for storing in a pipe's state\nflag.",167,{"inputs":[{"name":"signaltoken"}],"output":{"name":"usize"}}],[11,"cast_from_usize","","Convert from an unsafe usize value. Useful for retrieving a pipe's state\nflag.",167,{"inputs":[{"name":"signaltoken"},{"name":"usize"}],"output":{"name":"signaltoken"}}],[11,"wait","","",168,null],[11,"new","std::sync::mpsc::oneshot","",169,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",169,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"sent","","",169,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"recv","","",169,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",169,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"upgrade","","",169,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"drop_chan","","",169,null],[11,"drop_port","","",169,null],[11,"can_recv","","",169,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",169,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",169,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop","","",169,null],[11,"eq","std::sync::mpsc::select","",170,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"ne","","",170,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new selection structure. This set is initially empty.",171,{"inputs":[{"name":"select"}],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",171,{"inputs":[{"name":"select"},{"name":"receiver"}],"output":{"name":"handle"}}],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",171,{"inputs":[{"name":"select"}],"output":{"name":"usize"}}],[11,"id","","Retrieves the id of this handle.",172,{"inputs":[{"name":"handle"}],"output":{"name":"usize"}}],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",172,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",172,null],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",172,null],[11,"drop","","",171,null],[11,"drop","","",172,null],[11,"next","","",173,{"inputs":[{"name":"packets"}],"output":{"name":"option"}}],[11,"new","std::sync::mpsc::shared","",174,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"postinit_lock","","",174,{"inputs":[{"name":"packet"}],"output":{"name":"mutexguard"}}],[11,"inherit_blocker","","",174,null],[11,"send","","",174,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",174,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",174,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",174,null],[11,"drop_chan","","",174,null],[11,"drop_port","","",174,null],[11,"can_recv","","",174,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",174,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",174,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"drop","","",174,null],[11,"new","std::sync::mpsc::stream","",175,{"inputs":[{"name":"packet"}],"output":{"name":"packet"}}],[11,"send","","",175,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"upgrade","","",175,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"recv","","",175,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",175,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop_chan","","",175,null],[11,"drop_port","","",175,null],[11,"can_recv","","",175,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",175,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",175,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"result"}}],[11,"drop","","",175,null],[11,"fmt","std::sync::mpsc::sync","",176,{"inputs":[{"name":"failure"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",177,{"inputs":[{"name":"packet"},{"name":"usize"}],"output":{"name":"packet"}}],[11,"send","","",177,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","",177,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",177,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",177,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",177,null],[11,"drop_chan","","",177,null],[11,"drop_port","","",177,null],[11,"can_recv","","",177,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",177,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",177,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"drop","","",177,null],[11,"new","std::sync::mpsc::mpsc_queue","Creates a new queue that is safe to share among multiple producers and\none consumer.",178,{"inputs":[{"name":"queue"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue.",178,null],[11,"pop","","Pops some data from this queue.",178,{"inputs":[{"name":"queue"}],"output":{"name":"popresult"}}],[11,"drop","","",178,null],[11,"new","std::sync::mpsc::spsc_queue","Creates a new queue.",179,{"inputs":[{"name":"queue"},{"name":"usize"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue. Note that to use this function\nsafely, it must be externally guaranteed that there is only one pusher.",179,null],[11,"pop","","Attempts to pop a value from this queue. Remember that to use this type\nsafely you must ensure that there is only one popper at a time.",179,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"peek","","Attempts to peek at the head of the queue, returning `None` if the queue\nhas no data currently",179,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"drop","","",179,null],[11,"clone","std::sync::mpsc","",180,{"inputs":[{"name":"senderror"}],"output":{"name":"senderror"}}],[11,"eq","","",180,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"fmt","","",181,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",181,{"inputs":[{"name":"recverror"}],"output":{"name":"recverror"}}],[11,"eq","","",181,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"ne","","",181,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"fmt","","",182,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",182,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"tryrecverror"}}],[11,"eq","","",182,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"ne","","",182,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"clone","","",183,{"inputs":[{"name":"trysenderror"}],"output":{"name":"trysenderror"}}],[11,"eq","","",183,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"ne","","",183,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",184,{"inputs":[{"name":"sender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",184,{"inputs":[{"name":"sender"}],"output":{"name":"sender"}}],[11,"drop","","",184,null],[11,"send","","Sends a value on this synchronous channel.",185,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","Attempts to send a value on this channel without blocking.",185,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",185,{"inputs":[{"name":"syncsender"}],"output":{"name":"syncsender"}}],[11,"drop","","",185,null],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",186,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",186,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",186,{"inputs":[{"name":"receiver"}],"output":{"name":"iter"}}],[11,"next","","",187,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",188,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"into_iter","","",186,{"inputs":[{"name":"receiver"}],"output":{"name":"intoiter"}}],[11,"drop","","",186,null],[11,"fmt","","",180,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",180,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",180,{"inputs":[{"name":"senderror"}],"output":{"name":"str"}}],[11,"cause","","",180,{"inputs":[{"name":"senderror"}],"output":{"name":"option"}}],[11,"fmt","","",183,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",183,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",183,{"inputs":[{"name":"trysenderror"}],"output":{"name":"str"}}],[11,"cause","","",183,{"inputs":[{"name":"trysenderror"}],"output":{"name":"option"}}],[11,"fmt","","",181,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",181,{"inputs":[{"name":"recverror"}],"output":{"name":"str"}}],[11,"cause","","",181,{"inputs":[{"name":"recverror"}],"output":{"name":"option"}}],[11,"fmt","","",182,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",182,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"str"}}],[11,"cause","","",182,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"option"}}],[11,"new","std::sync::barrier","Creates a new barrier that can block a given number of threads.",189,{"inputs":[{"name":"barrier"},{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads has rendezvoused here.",189,{"inputs":[{"name":"barrier"}],"output":{"name":"barrierwaitresult"}}],[11,"is_leader","","Returns whether this thread from `wait` is the \"leader thread\".",190,{"inputs":[{"name":"barrierwaitresult"}],"output":{"name":"bool"}}],[11,"clone","std::sync::condvar","",191,{"inputs":[{"name":"waittimeoutresult"}],"output":{"name":"waittimeoutresult"}}],[11,"eq","","",191,{"inputs":[{"name":"waittimeoutresult"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"ne","","",191,{"inputs":[{"name":"waittimeoutresult"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"fmt","","",191,{"inputs":[{"name":"waittimeoutresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",191,{"inputs":[{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new condition variable which is ready to be waited on and\nnotified.",192,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",192,{"inputs":[{"name":"condvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",192,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",192,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",192,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",192,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",192,null],[11,"drop","","",192,null],[11,"new","","Creates a new condition variable",193,{"inputs":[{"name":"staticcondvar"}],"output":{"name":"staticcondvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",193,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",193,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",193,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",193,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",193,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",193,null],[11,"destroy","","Deallocates all resources associated with this static condvar.",193,null],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",194,{"inputs":[{"name":"mutex"},{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",194,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",194,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",194,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",194,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",194,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"drop","","",194,null],[11,"fmt","","",194,{"inputs":[{"name":"mutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new mutex in an unlocked state ready for use.",195,{"inputs":[{"name":"staticmutex"}],"output":{"name":"staticmutex"}}],[11,"lock","","Acquires this lock, see `Mutex::lock`",195,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",195,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates resources associated with this static mutex.",195,null],[11,"deref","","",196,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",196,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"drop","","",196,null],[11,"new","std::sync::once","Creates a new `Once` value.",197,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",197,null],[11,"new","std::sync::rwlock","Creates a new instance of an `RwLock<T>` which is unlocked.",198,{"inputs":[{"name":"rwlock"},{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",198,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",198,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",198,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",198,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",198,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",198,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",198,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"drop","","",198,null],[11,"fmt","","",198,{"inputs":[{"name":"rwlock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new rwlock.",199,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"staticrwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",199,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this lock with shared read access.",199,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",199,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",199,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates all resources associated with this static lock.",199,null],[11,"deref","","",200,{"inputs":[{"name":"rwlockreadguard"}],"output":{"name":"t"}}],[11,"deref","","",201,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",201,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"drop","","",200,null],[11,"drop","","",201,null],[11,"new","std::sync::semaphore","Creates a new semaphore with the initial count specified.",202,{"inputs":[{"name":"semaphore"},{"name":"isize"}],"output":{"name":"semaphore"}}],[11,"acquire","","Acquires a resource of this semaphore, blocking the current thread until\nit can do so.",202,null],[11,"release","","Release a resource from this semaphore.",202,null],[11,"access","","Acquires a resource of this semaphore, returning an RAII guard to\nrelease the semaphore when dropped.",202,{"inputs":[{"name":"semaphore"}],"output":{"name":"semaphoreguard"}}],[11,"drop","","",203,null],[11,"default","core::sync::atomic","",204,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",205,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",206,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",207,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",208,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",204,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",204,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",204,null],[11,"swap","","Stores a value into the bool, returning the old value.",204,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",204,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",204,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",204,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",204,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",204,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",205,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",205,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",205,null],[11,"swap","","Stores a value into the isize, returning the old value.",205,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",205,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",205,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",205,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",205,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",205,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",205,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",206,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",206,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",206,null],[11,"swap","","Stores a value into the usize, returning the old value.",206,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",206,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",206,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",206,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",206,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",206,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",206,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",207,null],[11,"load","","Loads a value from the pointer.",207,null],[11,"store","","Stores a value into the pointer.",207,null],[11,"swap","","Stores a value into the pointer, returning the old value.",207,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",207,null],[11,"fmt","","",206,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",205,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",204,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","std::time::duration","",209,null],[11,"fmt","","",209,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",209,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",209,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",209,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",209,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",209,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",209,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",209,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",209,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",209,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"new","","Creates a new `Duration` from the specified number of seconds and\nadditional nanosecond precision.",209,{"inputs":[{"name":"duration"},{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",209,{"inputs":[{"name":"duration"},{"name":"f"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",209,{"inputs":[{"name":"duration"},{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",209,{"inputs":[{"name":"duration"},{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds represented by this duration.",209,{"inputs":[{"name":"duration"}],"output":{"name":"u64"}}],[11,"subsec_nanos","","Returns the nanosecond precision represented by this duration.",209,{"inputs":[{"name":"duration"}],"output":{"name":"u32"}}],[11,"add","","",209,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",209,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",209,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"div","","",209,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"cmp","std::time","",210,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",210,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"option"}}],[11,"lt","","",210,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"le","","",210,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"gt","","",210,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ge","","",210,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"eq","","",210,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ne","","",210,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"clone","","",210,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"cmp","","",211,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",211,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"option"}}],[11,"lt","","",211,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"le","","",211,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"gt","","",211,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ge","","",211,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"eq","","",211,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ne","","",211,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"clone","","",211,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"fmt","","",212,{"inputs":[{"name":"systemtimeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",212,{"inputs":[{"name":"systemtimeerror"}],"output":{"name":"systemtimeerror"}}],[11,"now","","Returns an instant corresponding to \"now\".",210,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"duration_from_earlier","","Returns the amount of time elapsed from another instant to this one.",210,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"elapsed","","Returns the amount of time elapsed since this instant was created.",210,{"inputs":[{"name":"instant"}],"output":{"name":"duration"}}],[11,"add","","",210,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"sub","","",210,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"fmt","","",210,{"inputs":[{"name":"instant"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns the system time corresponding to \"now\".",211,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"duration_from_earlier","","Returns the amount of time elapsed from an earlier point in time.",211,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"result"}}],[11,"elapsed","","Returns the amount of time elapsed since this system time was created.",211,{"inputs":[{"name":"systemtime"}],"output":{"name":"result"}}],[11,"add","","",211,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"sub","","",211,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"fmt","","",211,{"inputs":[{"name":"systemtime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"duration","","Returns the positive duration which represents how far forward the\nsecond system time was from the first.",212,{"inputs":[{"name":"systemtimeerror"}],"output":{"name":"duration"}}],[11,"description","","",212,{"inputs":[{"name":"systemtimeerror"}],"output":{"name":"str"}}],[11,"fmt","","",212,{"inputs":[{"name":"systemtimeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys_common::condvar","Creates a new condition variable for use.",213,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","Signals one waiter on this condition variable to wake up.",213,null],[11,"notify_all","","Awakens all current waiters on this condition variable.",213,null],[11,"wait","","Waits for a signal on the specified mutex.",213,null],[11,"wait_timeout","","Waits for a signal on the specified mutex with a timeout duration\nspecified by `dur` (a relative time into the future).",213,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","Deallocates all resources associated with this condition variable.",213,null],[11,"clone","std::sys_common::dwarf::eh","",214,{"inputs":[{"name":"ehcontext"}],"output":{"name":"ehcontext"}}],[11,"new","std::sys_common::dwarf","",215,null],[11,"read","","",215,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"t"}}],[11,"read_uleb128","","",215,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"u64"}}],[11,"read_sleb128","","",215,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"i64"}}],[11,"clone","std::sys_common::libunwind","",216,{"inputs":[{"name":"_unwind_action"}],"output":{"name":"_unwind_action"}}],[11,"clone","","",217,{"inputs":[{"name":"_unwind_reason_code"}],"output":{"name":"_unwind_reason_code"}}],[11,"new","std::sys_common::mutex","Creates a new mutex for use.",218,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","Locks the mutex blocking the current thread until it is available.",218,null],[11,"try_lock","","Attempts to lock the mutex without blocking, returning whether it was\nsuccessfully acquired or not.",218,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"unlock","","Unlocks the mutex.",218,null],[11,"destroy","","Deallocates all resources associated with this mutex.",218,null],[11,"next","std::sys_common::net","",219,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"drop","","",219,null],[11,"connect","","",220,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",220,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"into_socket","","",220,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"set_read_timeout","","",220,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",220,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",220,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","",220,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",220,null],[11,"write","","",220,null],[11,"peer_addr","","",220,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"socket_addr","","",220,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","",220,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"duplicate","","",220,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",220,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",221,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",221,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"into_socket","","",221,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"socket_addr","","",221,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","",221,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"duplicate","","",221,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"fmt","","",221,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",222,{"inputs":[{"name":"udpsocket"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",222,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"into_socket","","",222,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"socket_addr","","",222,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"recv_from","","",222,null],[11,"send_to","","",222,null],[11,"duplicate","","",222,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",222,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",222,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",222,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","",222,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",222,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys_common::poison","",223,{"inputs":[{"name":"flag"}],"output":{"name":"flag"}}],[11,"borrow","","",223,{"inputs":[{"name":"flag"}],"output":{"name":"result"}}],[11,"done","","",223,null],[11,"get","","",223,{"inputs":[{"name":"flag"}],"output":{"name":"bool"}}],[11,"fmt","","",224,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",224,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",224,{"inputs":[{"name":"poisonerror"}],"output":{"name":"str"}}],[11,"new","","Creates a `PoisonError`.",224,{"inputs":[{"name":"poisonerror"},{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",224,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",224,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",224,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"from","","",225,{"inputs":[{"name":"trylockerror"},{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",225,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",225,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",225,{"inputs":[{"name":"trylockerror"}],"output":{"name":"str"}}],[11,"cause","","",225,{"inputs":[{"name":"trylockerror"}],"output":{"name":"option"}}],[11,"new","std::sys_common::remutex","Creates a new reentrant mutex in an unlocked state.",226,{"inputs":[{"name":"reentrantmutex"},{"name":"t"}],"output":{"name":"reentrantmutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",226,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",226,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"drop","","",226,null],[11,"fmt","","",226,{"inputs":[{"name":"reentrantmutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",227,{"inputs":[{"name":"reentrantmutexguard"}],"output":{"name":"t"}}],[11,"drop","","",227,null],[11,"new","std::sys_common::rwlock","Creates a new reader-writer lock for use.",228,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"read","","Acquires shared access to the underlying lock, blocking the current\nthread to do so.",228,null],[11,"try_read","","Attempts to acquire shared access to this lock, returning whether it\nsucceeded or not.",228,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","Acquires write access to the underlying lock, blocking the current thread\nto do so.",228,null],[11,"try_write","","Attempts to acquire exclusive access to this lock, returning whether it\nsucceeded or not.",228,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","Unlocks previously acquired shared access to this lock.",228,null],[11,"write_unlock","","Unlocks previously acquired exclusive access to this lock.",228,null],[11,"destroy","","Destroys OS-related resources with this RWLock.",228,null],[11,"new","std::sys_common::thread_local","",229,{"inputs":[{"name":"statickey"},{"name":"option"}],"output":{"name":"statickey"}}],[11,"get","","Gets the value associated with this TLS key",229,null],[11,"set","","Sets this TLS key to a new value.",229,null],[11,"destroy","","Deallocates this OS TLS key.",229,null],[11,"new","","Creates a new managed OS TLS key.",230,{"inputs":[{"name":"key"},{"name":"option"}],"output":{"name":"key"}}],[11,"get","","See StaticKey::get",230,null],[11,"set","","See StaticKey::set",230,null],[11,"drop","","",230,null],[11,"clone","std::sys_common::wtf8","",231,{"inputs":[{"name":"codepoint"}],"output":{"name":"codepoint"}}],[11,"partial_cmp","","",231,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"option"}}],[11,"lt","","",231,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"le","","",231,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"gt","","",231,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ge","","",231,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"cmp","","",231,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"ordering"}}],[11,"eq","","",231,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ne","","",231,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"fmt","","",231,{"inputs":[{"name":"codepoint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u32_unchecked","","Unsafely creates a new `CodePoint` without checking the value.",231,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"codepoint"}}],[11,"from_u32","","Creates a new `CodePoint` if the value is a valid code point.",231,{"inputs":[{"name":"codepoint"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_char","","Creates a new `CodePoint` from a `char`.",231,{"inputs":[{"name":"codepoint"},{"name":"char"}],"output":{"name":"codepoint"}}],[11,"to_u32","","Returns the numeric value of the code point.",231,{"inputs":[{"name":"codepoint"}],"output":{"name":"u32"}}],[11,"to_char","","Optionally returns a Unicode scalar value for the code point.",231,{"inputs":[{"name":"codepoint"}],"output":{"name":"option"}}],[11,"to_char_lossy","","Returns a Unicode scalar value for the code point.",231,{"inputs":[{"name":"codepoint"}],"output":{"name":"char"}}],[11,"clone","","",232,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"partial_cmp","","",232,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"option"}}],[11,"lt","","",232,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"le","","",232,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"gt","","",232,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ge","","",232,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"cmp","","",232,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"ordering"}}],[11,"eq","","",232,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ne","","",232,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"from_str","","Creates a WTF-8 slice from a UTF-8 `&str` slice.",233,{"inputs":[{"name":"wtf8"},{"name":"str"}],"output":{"name":"wtf8"}}],[11,"len","","Returns the length, in WTF-8 bytes.",233,{"inputs":[{"name":"wtf8"}],"output":{"name":"usize"}}],[11,"ascii_byte_at","","Returns the code point at `position` if it is in the ASCII range,\nor `b'\\xFF' otherwise.",233,{"inputs":[{"name":"wtf8"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"code_points","","Returns an iterator for the string’s code points.",233,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8codepoints"}}],[11,"as_str","","Tries to convert the string to UTF-8 and return a `&str` slice.",233,{"inputs":[{"name":"wtf8"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Lossily converts the string to UTF-8.\nReturns a UTF-8 `&str` slice if the contents are well-formed in UTF-8.",233,{"inputs":[{"name":"wtf8"}],"output":{"name":"cow"}}],[11,"encode_wide","","Converts the WTF-8 string to potentially ill-formed UTF-16\nand return an iterator of 16-bit code units.",233,{"inputs":[{"name":"wtf8"}],"output":{"name":"encodewide"}}],[11,"deref","","",232,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"fmt","","",232,{"inputs":[{"name":"wtf8buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new, empty WTF-8 string.",232,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"with_capacity","","Creates a new, empty WTF-8 string with pre-allocated capacity for `n` bytes.",232,{"inputs":[{"name":"wtf8buf"},{"name":"usize"}],"output":{"name":"wtf8buf"}}],[11,"from_string","","Creates a WTF-8 string from a UTF-8 `String`.",232,{"inputs":[{"name":"wtf8buf"},{"name":"string"}],"output":{"name":"wtf8buf"}}],[11,"from_str","","Creates a WTF-8 string from a UTF-8 `&str` slice.",232,{"inputs":[{"name":"wtf8buf"},{"name":"str"}],"output":{"name":"wtf8buf"}}],[11,"from_wide","","Creates a WTF-8 string from a potentially ill-formed UTF-16 slice of 16-bit code units.",232,null],[11,"as_slice","","",232,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `Wtf8Buf`.\nThe collection may reserve more space to avoid frequent reallocations.",232,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without reallocating.",232,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"usize"}}],[11,"push_str","","Append a UTF-8 slice at the end of the string.",232,null],[11,"push_wtf8","","Append a WTF-8 slice at the end of the string.",232,null],[11,"push_char","","Append a Unicode scalar value at the end of the string.",232,null],[11,"push","","Append a code point at the end of the string.",232,null],[11,"truncate","","Shortens a string to the specified length.",232,null],[11,"into_string","","Consumes the WTF-8 string and tries to convert it to UTF-8.",232,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"result"}}],[11,"into_string_lossy","","Consumes the WTF-8 string and converts it lossily to UTF-8.",232,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"string"}}],[11,"from_iter","","",232,{"inputs":[{"name":"wtf8buf"},{"name":"t"}],"output":{"name":"wtf8buf"}}],[11,"extend","","",232,null],[11,"partial_cmp","","",233,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"option"}}],[11,"lt","","",233,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"le","","",233,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"gt","","",233,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ge","","",233,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"eq","","",233,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ne","","",233,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"cmp","","",233,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"ordering"}}],[11,"fmt","","",233,{"inputs":[{"name":"wtf8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",233,{"inputs":[{"name":"wtf8"},{"name":"range"}],"output":{"name":"wtf8"}}],[11,"index","","",233,{"inputs":[{"name":"wtf8"},{"name":"rangefrom"}],"output":{"name":"wtf8"}}],[11,"index","","",233,{"inputs":[{"name":"wtf8"},{"name":"rangeto"}],"output":{"name":"wtf8"}}],[11,"index","","",233,{"inputs":[{"name":"wtf8"},{"name":"rangefull"}],"output":{"name":"wtf8"}}],[11,"clone","","",234,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"wtf8codepoints"}}],[11,"next","","",234,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"option"}}],[11,"size_hint","","",234,null],[11,"clone","","",235,{"inputs":[{"name":"encodewide"}],"output":{"name":"encodewide"}}],[11,"next","","",235,{"inputs":[{"name":"encodewide"}],"output":{"name":"option"}}],[11,"size_hint","","",235,null],[11,"hash","","",231,null],[11,"hash","","",232,null],[11,"hash","","",233,null],[11,"is_ascii","","",233,{"inputs":[{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",233,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"to_ascii_lowercase","","",233,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"eq_ignore_ascii_case","","",233,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",233,null],[11,"make_ascii_lowercase","","",233,null],[11,"new","std::sys::condvar","",236,{"inputs":[{"name":"condvar"}],"output":{"name":"condvar"}}],[11,"notify_one","","",236,null],[11,"notify_all","","",236,null],[11,"wait","","",236,null],[11,"wait_timeout","","",236,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","",236,null],[11,"new","std::sys::fd","",237,{"inputs":[{"name":"filedesc"},{"name":"i32"}],"output":{"name":"filedesc"}}],[11,"raw","","",237,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"into_raw","","Extracts the actual filedescriptor without closing it.",237,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"read","","",237,null],[11,"write","","",237,null],[11,"set_cloexec","","",237,null],[11,"drop","","",237,null],[11,"clone","std::sys::fs","",238,{"inputs":[{"name":"fileattr"}],"output":{"name":"fileattr"}}],[11,"clone","","",239,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",240,{"inputs":[{"name":"filepermissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",240,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"ne","","",240,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"clone","","",240,{"inputs":[{"name":"filepermissions"}],"output":{"name":"filepermissions"}}],[11,"hash","","",241,null],[11,"eq","","",241,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",241,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",241,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"size","","",238,{"inputs":[{"name":"fileattr"}],"output":{"name":"u64"}}],[11,"perm","","",238,{"inputs":[{"name":"fileattr"}],"output":{"name":"filepermissions"}}],[11,"file_type","","",238,{"inputs":[{"name":"fileattr"}],"output":{"name":"filetype"}}],[11,"as_raw_stat","std::fs","",91,{"inputs":[{"name":"metadata"}],"output":{"name":"stat"}}],[11,"readonly","std::sys::fs","",240,{"inputs":[{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","",240,null],[11,"mode","","",240,{"inputs":[{"name":"filepermissions"}],"output":{"name":"u32"}}],[11,"is_dir","","",241,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","",241,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","",241,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is","","",241,{"inputs":[{"name":"filetype"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"next","","",242,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"drop","","",243,null],[11,"path","","",244,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"file_name","","",244,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"metadata","","",244,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","",244,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"ino","","",244,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"new","","",239,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"read","","",239,null],[11,"write","","",239,null],[11,"append","","",239,null],[11,"truncate","","",239,null],[11,"create","","",239,null],[11,"mode","","",239,null],[11,"open","","",245,{"inputs":[{"name":"file"},{"name":"path"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"open_c","","",245,{"inputs":[{"name":"file"},{"name":"cstr"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"file_attr","","",245,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fsync","","",245,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"datasync","","",245,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"truncate","","",245,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"read","","",245,null],[11,"write","","",245,null],[11,"flush","","",245,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",245,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fd","","",245,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"into_fd","","",245,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"new","","",246,{"inputs":[{"name":"dirbuilder"}],"output":{"name":"dirbuilder"}}],[11,"mkdir","","",246,{"inputs":[{"name":"dirbuilder"},{"name":"path"}],"output":{"name":"result"}}],[11,"set_mode","","",246,null],[11,"fmt","","",245,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys::mutex","",247,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"lock","","",247,null],[11,"unlock","","",247,null],[11,"try_lock","","",247,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"destroy","","",247,null],[11,"uninitialized","","",248,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"reentrantmutex"}}],[11,"init","","",248,null],[11,"lock","","",248,null],[11,"try_lock","","",248,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"bool"}}],[11,"unlock","","",248,null],[11,"destroy","","",248,null],[11,"new","std::sys::net","",249,{"inputs":[{"name":"socket"},{"name":"socketaddr"},{"name":"i32"}],"output":{"name":"result"}}],[11,"accept","","",249,null],[11,"duplicate","","",249,{"inputs":[{"name":"socket"}],"output":{"name":"result"}}],[11,"read","","",249,null],[11,"set_timeout","","",249,{"inputs":[{"name":"socket"},{"name":"option"},{"name":"i32"}],"output":{"name":"result"}}],[11,"timeout","","",249,{"inputs":[{"name":"socket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"shutdown","","",249,{"inputs":[{"name":"socket"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"clone","libc::unix","",250,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",251,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",252,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",253,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",254,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",255,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",256,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",257,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",258,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",259,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",260,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","","",261,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[11,"clone","libc::unix::notbsd","",262,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",263,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",264,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",265,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",266,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",267,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",268,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",269,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",270,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",271,{"inputs":[{"name":"sched_param"}],"output":{"name":"sched_param"}}],[11,"clone","","",272,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",273,{"inputs":[{"name":"epoll_event"}],"output":{"name":"epoll_event"}}],[11,"clone","","",274,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","libc::unix::notbsd::linux","",275,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",276,{"inputs":[{"name":"dirent64"}],"output":{"name":"dirent64"}}],[11,"clone","","",277,{"inputs":[{"name":"rlimit64"}],"output":{"name":"rlimit64"}}],[11,"clone","","",278,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",279,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",280,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",281,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",282,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",283,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",284,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",285,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",286,{"inputs":[{"name":"sockaddr_nl"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",287,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",288,{"inputs":[{"name":"signalfd_siginfo"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",289,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","","",290,{"inputs":[{"name":"mq_attr"}],"output":{"name":"mq_attr"}}],[11,"clone","","",291,{"inputs":[{"name":"cpu_set_t"}],"output":{"name":"cpu_set_t"}}],[11,"clone","libc::unix::notbsd::linux::other","",292,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",293,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",294,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",295,{"inputs":[{"name":"glob64_t"}],"output":{"name":"glob64_t"}}],[11,"clone","","",296,{"inputs":[{"name":"ucred"}],"output":{"name":"ucred"}}],[11,"clone","","",297,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",298,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",299,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","","",300,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","libc::unix::notbsd::linux::other::b64","",301,{"inputs":[{"name":"sigset_t"}],"output":{"name":"sigset_t"}}],[11,"clone","libc::unix::notbsd::linux::other::b64::x86_64","",302,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",303,{"inputs":[{"name":"stat64"}],"output":{"name":"stat64"}}],[11,"clone","","",304,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","libc::unix::notbsd::linux::other","",305,{"inputs":[{"name":"ipc_perm"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",306,{"inputs":[{"name":"shmid_ds"}],"output":{"name":"shmid_ds"}}],[11,"next","std::sys::os","",307,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",307,null],[11,"fmt","","",308,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",308,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",309,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",309,null],[11,"len","","",309,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",310,{"inputs":[{"name":"env"}],"output":{"name":"option"}}],[11,"size_hint","","",310,null],[11,"hash","std::sys::os_str","",311,null],[11,"clone","","",311,{"inputs":[{"name":"buf"}],"output":{"name":"buf"}}],[11,"fmt","","",312,{"inputs":[{"name":"slice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",311,{"inputs":[{"name":"buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_string","","",311,{"inputs":[{"name":"buf"},{"name":"string"}],"output":{"name":"buf"}}],[11,"as_slice","","",311,{"inputs":[{"name":"buf"}],"output":{"name":"slice"}}],[11,"into_string","","",311,{"inputs":[{"name":"buf"}],"output":{"name":"result"}}],[11,"push_slice","","",311,null],[11,"from_str","","",312,{"inputs":[{"name":"slice"},{"name":"str"}],"output":{"name":"slice"}}],[11,"to_str","","",312,{"inputs":[{"name":"slice"}],"output":{"name":"option"}}],[11,"to_string_lossy","","",312,{"inputs":[{"name":"slice"}],"output":{"name":"cow"}}],[11,"to_owned","","",312,{"inputs":[{"name":"slice"}],"output":{"name":"buf"}}],[11,"from_fd","std::sys::pipe","",313,{"inputs":[{"name":"anonpipe"},{"name":"i32"}],"output":{"name":"anonpipe"}}],[11,"read","","",313,null],[11,"write","","",313,null],[11,"raw","","",313,{"inputs":[{"name":"anonpipe"}],"output":{"name":"i32"}}],[11,"fd","","",313,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"into_fd","","",313,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"clone","std::sys::process","",314,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"new","","",314,{"inputs":[{"name":"command"},{"name":"osstr"}],"output":{"name":"command"}}],[11,"arg","","",314,null],[11,"args","","",314,null],[11,"env","","",314,null],[11,"env_remove","","",314,null],[11,"env_clear","","",314,null],[11,"cwd","","",314,null],[11,"fmt","","",315,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",315,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",315,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",315,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","",315,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","",315,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"signal","","",315,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",315,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","",316,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"spawn","","",316,{"inputs":[{"name":"process"},{"name":"command"},{"name":"stdio"},{"name":"stdio"},{"name":"stdio"}],"output":{"name":"result"}}],[11,"id","","",316,{"inputs":[{"name":"process"}],"output":{"name":"u32"}}],[11,"wait","","",316,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"try_wait","","",316,{"inputs":[{"name":"process"}],"output":{"name":"option"}}],[11,"new","std::sys::rwlock","",317,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"read","","",317,null],[11,"try_read","","",317,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","",317,null],[11,"try_write","","",317,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","",317,null],[11,"write_unlock","","",317,null],[11,"destroy","","",317,null],[11,"new","std::sys::stack_overflow","",318,{"inputs":[{"name":"handler"}],"output":{"name":"handler"}}],[11,"drop","","",318,null],[11,"new","std::sys::thread","",319,{"inputs":[{"name":"thread"},{"name":"usize"},{"name":"box"}],"output":{"name":"result"}}],[11,"yield_now","","",319,null],[11,"set_name","","",319,null],[11,"sleep","","",319,null],[11,"join","","",319,null],[11,"id","","",319,{"inputs":[{"name":"thread"}],"output":{"name":"u64"}}],[11,"into_id","","",319,{"inputs":[{"name":"thread"}],"output":{"name":"u64"}}],[11,"drop","","",319,null],[11,"clone","std::sys::time::inner","",320,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"cmp","","",321,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",321,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"option"}}],[11,"lt","","",321,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"le","","",321,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"gt","","",321,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ge","","",321,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"eq","","",321,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ne","","",321,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"clone","","",321,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"cmp","","",322,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",322,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"option"}}],[11,"lt","","",322,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"le","","",322,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"gt","","",322,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ge","","",322,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"eq","","",322,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ne","","",322,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"clone","","",322,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"now","","",321,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"sub_instant","","",321,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"add_duration","","",321,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"sub_duration","","",321,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"fmt","","",321,{"inputs":[{"name":"instant"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","",322,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"sub_time","","",322,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"result"}}],[11,"add_duration","","",322,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"sub_duration","","",322,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"fmt","","",322,{"inputs":[{"name":"systemtime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","",320,{"inputs":[{"name":"timespec"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"eq","","",320,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",320,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"cmp","","",320,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"new","std::sys::stdio","",323,{"inputs":[{"name":"stdin"}],"output":{"name":"result"}}],[11,"read","","",323,null],[11,"new","","",324,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write","","",324,null],[11,"new","","",325,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write","","",325,null],[11,"write","","",325,null],[11,"flush","","",325,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"clone","std::panicking","",326,{"inputs":[{"name":"handler"}],"output":{"name":"handler"}}],[11,"payload","","Returns the payload associated with the panic.",327,{"inputs":[{"name":"panicinfo"}],"output":{"name":"any"}}],[11,"location","","Returns information about the location from which the panic originated,\nif available.",327,{"inputs":[{"name":"panicinfo"}],"output":{"name":"option"}}],[11,"file","","Returns the name of the source file from which the panic originated.",328,{"inputs":[{"name":"location"}],"output":{"name":"str"}}],[11,"line","","Returns the line number from which the panic originated.",328,{"inputs":[{"name":"location"}],"output":{"name":"u32"}}],[11,"new","std::rand::os::imp","Create a new `OsRng`.",329,{"inputs":[{"name":"osrng"}],"output":{"name":"result"}}],[11,"next_u32","","",329,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",329,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",329,null],[11,"new","std::rand::reader","Create a new `ReaderRng` from a `Read`.",330,{"inputs":[{"name":"readerrng"},{"name":"r"}],"output":{"name":"readerrng"}}],[11,"next_u32","","",330,{"inputs":[{"name":"readerrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",330,{"inputs":[{"name":"readerrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",330,null],[11,"clone","std::rand","",331,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",331,{"inputs":[{"name":"stdrng"}],"output":{"name":"result"}}],[11,"next_u32","","",331,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",331,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",331,null],[11,"from_seed","","",331,null],[11,"reseed","","",332,null],[11,"clone","","",333,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",333,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",333,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",333,null],[11,"fmt","procrs::pid","",334,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",334,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",334,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",334,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",334,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",334,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",334,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",334,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",335,null],[11,"fmt","","",335,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",335,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",335,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",335,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",335,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",336,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",336,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",336,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",336,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",336,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",336,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",336,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",337,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",337,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",337,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",337,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",338,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",338,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",338,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",338,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",338,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",338,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",338,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",338,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",338,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",339,null],[11,"clone","","",339,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",340,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",340,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",340,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",340,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",341,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",341,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",342,null],[11,"deref","","",341,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",341,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",343,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",343,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",343,null],[11,"fmt","core::cmp","",344,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",344,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",344,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",344,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",344,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",344,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",344,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",345,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",345,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",345,null],[11,"finish","","",345,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",345,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",345,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"build_hasher","core::hash","",346,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",346,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",346,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"clone","core::iter","",347,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",347,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",347,null],[11,"next_back","","",347,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",348,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",348,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",348,null],[11,"next_back","","",348,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",349,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",349,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",349,null],[11,"clone","","",350,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",351,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",350,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",350,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",350,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",350,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",350,null],[11,"next_back","","",350,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",352,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",352,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",352,null],[11,"next_back","","",352,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",353,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",353,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",353,null],[11,"next_back","","",353,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",354,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",354,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",354,null],[11,"next_back","","",354,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",355,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",355,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",355,null],[11,"next_back","","",355,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",356,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",356,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",356,null],[11,"nth","","",356,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",356,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",356,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",357,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",357,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",357,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",357,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",357,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",357,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",357,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",357,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",358,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",358,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",358,null],[11,"clone","","",359,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",359,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",359,null],[11,"clone","","",360,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",360,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",360,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",360,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",360,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",360,null],[11,"clone","","",361,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",361,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",361,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",361,null],[11,"clone","","",362,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",362,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",362,null],[11,"clone","","",363,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",363,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",363,null],[11,"next_back","","",363,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",364,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",364,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",364,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",364,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",364,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",364,null],[11,"next_back","","",364,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",365,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",365,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",365,null],[11,"next_back","","",365,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",366,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",367,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",368,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",366,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",366,null],[11,"clone","","",369,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",369,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",369,null],[11,"next_back","","",369,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",366,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",366,null],[11,"next","core::ops","",368,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",368,null],[11,"next_back","","",368,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",367,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",370,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",370,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",370,null],[11,"next_back","","",370,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",371,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",371,null],[11,"next_back","","",371,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",371,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",371,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",371,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",372,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",372,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",372,null],[11,"next_back","","",372,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",372,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::marker","",373,null],[11,"eq","","",373,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",373,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",373,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",373,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",373,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",374,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",374,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",374,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",374,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",368,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",368,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",368,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",368,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",367,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",367,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",367,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",367,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",375,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",375,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",375,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",375,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::ptr","Creates a new `Unique`.",376,null],[11,"get","","Dereferences the content.",376,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",376,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",376,null],[11,"fmt","","",376,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",377,null],[11,"clone","","",377,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",377,null],[11,"fmt","","",377,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","core::raw","",378,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",379,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",380,null],[11,"fmt","","",380,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",380,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",380,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",380,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",380,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",380,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",380,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",380,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",380,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",380,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",380,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",380,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",380,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",380,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",380,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",380,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",380,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",380,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",380,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",380,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",380,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",380,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",380,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",380,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",380,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",380,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",380,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",380,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",380,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",380,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",381,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",381,null],[11,"next_back","","",381,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",381,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",382,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",382,null],[11,"next_back","","",382,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",383,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",383,null],[11,"next_back","","",383,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",380,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"hash","core::option","",384,null],[11,"fmt","","",384,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",384,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",384,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",384,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",384,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",384,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",384,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",384,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",384,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",384,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",384,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",384,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",384,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",384,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",384,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",384,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",384,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",384,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",384,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",384,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",384,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",384,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",384,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",384,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",384,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",384,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",384,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",384,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",384,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",384,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\noption.",384,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",384,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","","",384,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",384,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",385,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",385,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",385,null],[11,"next_back","","",385,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",386,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",386,null],[11,"next_back","","",386,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",386,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",387,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",387,null],[11,"next_back","","",387,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",388,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",388,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",388,null],[11,"next_back","","",388,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",384,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","alloc::boxed","",389,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",390,null],[11,"make_place","","",390,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"intermediatebox"}}],[11,"finalize","","",390,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",6,{"inputs":[{"name":"box"},{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",389,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",390,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",6,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",6,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",6,null],[11,"default","","",6,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",6,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",6,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",6,null],[11,"clone","","",6,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",6,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",6,null],[11,"from","","",6,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",6,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",6,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",6,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",6,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",6,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",6,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",6,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",6,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",6,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_ref","","",6,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_mut","","",6,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",391,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc<T>` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",391,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",391,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",391,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",391,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",391,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share\nthe same inner value.",391,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` has\none strong reference and no weak references.",391,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Rc<T>` by cloning the inner\ndata if the `Rc<T>` doesn't have one strong reference and no weak\nreferences.",391,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",391,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc<T>`.",391,null],[11,"clone","","Makes a clone of the `Rc<T>`.",391,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",391,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc<T>`s.",391,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc<T>`s.",391,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",391,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc<T>`s.",391,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",391,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",391,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",391,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc<T>`s.",391,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",391,null],[11,"fmt","","",391,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",391,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",391,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",391,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",392,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak<T>`.",392,null],[11,"clone","","Makes a clone of the `Weak<T>`.",392,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",392,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Weak<T>` without an accompanying instance of T.",392,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"borrow","","",391,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"as_ref","","",391,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"borrow","collections::borrow","",162,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",162,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",162,null],[11,"into_owned","","Extracts the owned data.",162,null],[11,"deref","","",162,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",162,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",162,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",162,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",162,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",162,null],[11,"into_cow","","",162,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",162,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"clone","core::fmt::rt::v1","",393,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",394,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",395,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",395,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",395,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",396,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",397,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"borrow","collections::vec","",64,null],[11,"borrow_mut","","",64,null],[11,"clone","collections::str","",398,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[11,"next","","",398,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",398,null],[11,"borrow","collections::string","",90,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",399,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",399,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",399,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",399,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",400,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",401,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",400,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",400,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",400,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",402,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",402,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",402,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",402,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",402,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",402,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",402,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",402,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",403,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",403,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",403,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",403,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",403,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",403,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",403,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",403,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",404,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",404,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",404,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",404,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",404,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",404,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",404,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",404,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",405,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",405,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",406,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",406,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",407,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",407,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",405,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",405,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",405,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",405,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",405,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",408,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",408,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",409,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",409,null],[11,"matching","","",409,null],[11,"use_early_reject","","",410,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",410,null],[11,"matching","","",410,null],[11,"cmp","collections::string","",90,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",90,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",90,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",90,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",90,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",90,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new empty `String`.",90,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",90,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",90,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a `String`, including invalid characters.",90,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",90,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",90,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",90,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",90,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",90,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",90,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_mut_str","","Extracts a string slice containing the entire string.",90,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",90,null],[11,"capacity","","Returns this `String`'s capacity, in bytes.",90,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes\nlarger than its length.",90,null],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes\nlarger than its length.",90,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",90,null],[11,"push","","Appends the given `char` to the end of this `String`.",90,null],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",90,null],[11,"truncate","","Shortens this `String` to the specified length.",90,null],[11,"pop","","Removes the last character from the string buffer and returns it.",90,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",90,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into this `String` at a byte position.",90,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",90,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",90,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",90,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates this `String`, removing all contents.",90,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",90,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts this `String` into a `Box<str>`.",90,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",11,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",11,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",11,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",90,null],[11,"from_iter","","",90,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",90,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",90,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",90,null],[11,"extend","","",90,null],[11,"extend","","",90,null],[11,"extend","","",90,null],[11,"eq","","",90,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",90,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",90,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",162,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",162,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",162,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",90,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"default","","",90,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",90,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",90,null],[11,"add","","",90,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",90,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",90,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",90,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",90,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",90,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",90,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",90,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",90,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",90,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",90,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"from_str","","",90,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",411,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",411,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",411,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"as_ref","","",90,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",90,null],[11,"from","","",90,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",162,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",162,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",90,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",90,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",90,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",90,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",412,null],[11,"next","","",412,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",412,null],[11,"next_back","","",412,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",64,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",64,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",64,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",64,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to avoid\nfrequent reallocations.",64,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",64,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",64,null],[11,"into_boxed_slice","","Converts the vector into Box<[T]>.",64,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",64,null],[11,"as_slice","","Extracts a slice containing the entire vector.",64,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",64,null],[11,"set_len","","Sets the length of a vector.",64,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",64,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",64,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",64,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",64,null],[11,"push","","Appends an element to the back of a collection.",64,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",64,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",64,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",64,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",64,null],[11,"len","","Returns the number of elements in the vector.",64,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",64,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",64,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",64,null],[11,"push_all","","",64,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",64,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",64,null],[11,"clone","","",64,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",64,null],[11,"hash","","",64,null],[11,"index","","",64,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",64,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",64,null],[11,"index","","",64,null],[11,"index","","",64,null],[11,"index","","",64,null],[11,"index_mut","","",64,null],[11,"index_mut","","",64,null],[11,"index_mut","","",64,null],[11,"index_mut","","",64,null],[11,"deref","","",64,null],[11,"deref_mut","","",64,null],[11,"from_iter","","",64,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",64,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",64,null],[11,"extend","","",64,null],[11,"eq","","",64,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","collections::borrow","",162,null],[11,"ne","","",162,null],[11,"eq","","",162,null],[11,"ne","","",162,null],[11,"eq","","",162,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"partial_cmp","","",64,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",64,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",64,null],[11,"default","","",64,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",64,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",64,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_mut","","",64,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",64,null],[11,"as_mut","","",64,null],[11,"from","","",64,null],[11,"from","","",64,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from_iter","collections::borrow","",162,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",64,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"next","","",413,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",413,null],[11,"count","","",413,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",413,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",413,null],[11,"next","","",414,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",414,null],[11,"next_back","","",414,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",414,null],[11,"next","rustc_unicode::char","",415,{"inputs":[{"name":"tolowercase"}],"output":{"name":"option"}}],[11,"next","","",416,{"inputs":[{"name":"touppercase"}],"output":{"name":"option"}}],[11,"next","","",417,{"inputs":[{"name":"casemappingiter"}],"output":{"name":"option"}}],[11,"clone","","",418,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"decodeutf16"}}],[11,"next","","",418,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",418,null],[11,"fmt","procrs::pid","",0,{"inputs":[{"name":"pid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Pid struct for a process, given a pid.",0,{"inputs":[{"name":"pid"},{"name":"taskid"}],"output":{"name":"result"}}],[11,"tasks","","",0,{"inputs":[{"name":"pid"}],"output":{"name":"option"}}],[11,"tasks_query","","",0,{"inputs":[{"name":"pid"},{"name":"pidquery"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"pid"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"pid"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"pid"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"new","","Create a new iterator over all processes in /proc.",419,{"inputs":[{"name":"piditer"}],"output":{"name":"result"}}],[11,"new_query","","Create a new iterator over all processes in /proc, but only yield\nprocesses that match the given query.",419,{"inputs":[{"name":"piditer"},{"name":"pidquery"}],"output":{"name":"result"}}],[11,"next","","",419,{"inputs":[{"name":"piditer"}],"output":{"name":"option"}}],[11,"size_hint","","Size may be anywhere from 0 to number of dirs.",419,null],[11,"new","","Create a new iterator over all tasks in /proc.",420,{"inputs":[{"name":"tiditer"}],"output":{"name":"result"}}],[11,"new_query","","Create a new iterator over all tasks in /proc, but only yield\nthose that match the given query.",420,{"inputs":[{"name":"tiditer"},{"name":"pidquery"}],"output":{"name":"result"}}],[11,"next","","",420,{"inputs":[{"name":"tiditer"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"pidquery"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"pidquery"}],"output":{"name":"pidquery"}}],[11,"taskid_query","","Match a pid by simple equality.",1,{"inputs":[{"name":"pidquery"},{"name":"taskid"},{"name":"taskid"}],"output":{"name":"bool"}}],[11,"string_query","","For strings, use a substring search.",1,{"inputs":[{"name":"pidquery"},{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[11,"from_str","","",1,{"inputs":[{"name":"pidquery"},{"name":"str"}],"output":{"name":"result"}}],[0,"error","procrs","The error type used for this crate",null,null],[3,"ProcError","procrs::error","The error type for operations on /proc.",null,null],[4,"ProcFile","","A list of files contained in the /proc directory>",null,null],[13,"ProcDir","","/proc directory, contains files containg various pieces of information about the system.",421,null],[13,"ProcCmdline","","/proc/cmdline file, contains the cmdline used when starting the kernel.",421,null],[13,"ProcCpuinfo","","/proc/cpuinfo file, contains information about the cpu.",421,null],[13,"ProcMeminfo","","/proc/meminfo file, contains information about the memory resources of the system.",421,null],[13,"ProcStat","","/proc/stat file.",421,null],[13,"ProcUptime","","/proc/uptime file, contains the uptime of the system.",421,null],[13,"ProcStatus","","/proc/status file.",421,null],[13,"PidDir","","/proc/[pid] directory, contains files relating to the process at [pid].",421,null],[13,"PidStatus","","/proc/[pid]/status file, contains various human-readable stats about the process.",421,null],[13,"PidStat","","/proc/[pid]/stat file, contains various stats about the process.",421,null],[13,"PidCmdline","","/proc/[pid]/cmdline file, contains the cmdline given when starting the process.",421,null],[13,"PidTaskDir","","/proc/[pid]/task directory, contains threads of a process.",421,null],[4,"ProcOper","","A list of errors that can occur while operating on something in /proc.",null,null],[13,"Opening","","Error opening a file/directory.",422,null],[13,"Reading","","Error reading a file/directory.",422,null],[13,"Parsing","","Error parsing a file/directory.",422,null],[13,"ParsingField","","Error parsing a specific field in a file/directory.",422,null],[11,"eq","","",421,{"inputs":[{"name":"procfile"},{"name":"procfile"}],"output":{"name":"bool"}}],[11,"ne","","",421,{"inputs":[{"name":"procfile"},{"name":"procfile"}],"output":{"name":"bool"}}],[11,"description","","",421,{"inputs":[{"name":"procfile"}],"output":{"name":"str"}}],[11,"cause","","",421,{"inputs":[{"name":"procfile"}],"output":{"name":"option"}}],[11,"fmt","","",421,{"inputs":[{"name":"procfile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",421,{"inputs":[{"name":"procfile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",422,{"inputs":[{"name":"procoper"},{"name":"procoper"}],"output":{"name":"bool"}}],[11,"ne","","",422,{"inputs":[{"name":"procoper"},{"name":"procoper"}],"output":{"name":"bool"}}],[11,"is_hard","","",422,{"inputs":[{"name":"procoper"}],"output":{"name":"bool"}}],[11,"description","","",422,{"inputs":[{"name":"procoper"}],"output":{"name":"str"}}],[11,"fmt","","",422,{"inputs":[{"name":"procoper"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",422,{"inputs":[{"name":"procoper"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_err","","",423,{"inputs":[{"name":"procerror"},{"name":"procoper"},{"name":"procfile"},{"name":"e"}],"output":{"name":"procerror"}}],[11,"new_more","","",423,{"inputs":[{"name":"procerror"},{"name":"procoper"},{"name":"procfile"},{"name":"option"}],"output":{"name":"procerror"}}],[11,"new","","",423,{"inputs":[{"name":"procerror"},{"name":"procoper"},{"name":"procfile"},{"name":"option"},{"name":"option"}],"output":{"name":"procerror"}}],[11,"is_hard","","",423,{"inputs":[{"name":"procerror"}],"output":{"name":"bool"}}],[11,"description","","",423,{"inputs":[{"name":"procerror"}],"output":{"name":"str"}}],[11,"cause","","",423,{"inputs":[{"name":"procerror"}],"output":{"name":"option"}}],[11,"fmt","","",423,{"inputs":[{"name":"procerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",423,{"inputs":[{"name":"procerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",423,{"inputs":[{"name":"procerror"},{"name":"self"}],"output":{"name":"bool"}}],[0,"meminfo","procrs","Get informmation about system memory",null,null],[3,"Meminfo","procrs::meminfo","",null,null],[12,"memtotal","","",424,null],[12,"memfree","","",424,null],[12,"memavailable","","",424,null],[12,"buffers","","",424,null],[12,"cached","","",424,null],[12,"swapcached","","",424,null],[12,"active","","",424,null],[12,"inactive","","",424,null],[12,"activeanon","","",424,null],[12,"inactiveanon","","",424,null],[12,"activefile","","",424,null],[12,"inactivefile","","",424,null],[12,"unevictable","","",424,null],[12,"mlocked","","",424,null],[12,"swaptotal","","",424,null],[12,"swapfree","","",424,null],[12,"dirty","","",424,null],[12,"writeback","","",424,null],[12,"anonpages","","",424,null],[12,"mapped","","",424,null],[12,"shmem","","",424,null],[12,"slab","","",424,null],[12,"srelclaimable","","",424,null],[12,"sunreclaim","","",424,null],[12,"kernelstack","","",424,null],[12,"pagetables","","",424,null],[12,"nfsunstable","","",424,null],[12,"bounce","","",424,null],[12,"writebacktmp","","",424,null],[12,"commitlimit","","",424,null],[12,"committedas","","",424,null],[12,"vmalloctotal","","",424,null],[12,"vmallocused","","",424,null],[12,"vmallocchunk","","",424,null],[12,"hardwarecorrupted","","",424,null],[12,"anonhugepages","","",424,null],[12,"hugepagestotal","","",424,null],[12,"hugepagesfree","","",424,null],[12,"hugepagsersvd","","",424,null],[12,"hugepagessurp","","",424,null],[12,"hugepagessize","","",424,null],[12,"directmap4k","","",424,null],[12,"directmap2m","","",424,null],[12,"directmap1g","","",424,null],[12,"mainused","","",424,null],[12,"maincached","","",424,null],[12,"mainswapused","","",424,null],[4,"MeminfoError","","",null,null],[13,"Io","","",425,null],[13,"NotFound","","",425,null],[11,"fmt","","",425,{"inputs":[{"name":"meminfoerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",425,{"inputs":[{"name":"meminfoerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",425,{"inputs":[{"name":"meminfoerror"},{"name":"error"}],"output":{"name":"meminfoerror"}}],[11,"fmt","","",424,{"inputs":[{"name":"meminfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",424,{"inputs":[{"name":"meminfo"}],"output":{"name":"result"}}],[11,"fmt","","",424,{"inputs":[{"name":"meminfo"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"TaskId","procrs","The type used to repesent pids",null,null],[6,"MemSize","","The type used to repesent memory (in bytes)",null,null]],"paths":[[3,"Pid"],[4,"PidQuery"],[3,"PidStat"],[4,"PidState"],[3,"PidStatus"],[3,"HashSet"],[3,"Box"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"ParseIntError"],[3,"ParseFloatError"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[8,"Error"],[3,"EscapeDefault"],[3,"Wrapping"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"Key"],[3,"Key"],[3,"ScopedKey"],[3,"KeyInner"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"RawBucket"],[3,"Bucket"],[3,"SafeHash"],[3,"FullBucket"],[3,"EmptyBucket"],[4,"BucketState"],[3,"GapThenFull"],[3,"RawTable"],[3,"RawBuckets"],[3,"RevMoveBuckets"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"DefaultResizePolicy"],[3,"HashMap"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"DefaultState"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"DynamicLibrary"],[3,"Vars"],[3,"VarsOs"],[4,"VarError"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"IntoStringError"],[3,"Error"],[3,"OsString"],[3,"OsStr"],[3,"String"],[3,"Metadata"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"File"],[3,"ReadDir"],[3,"DirEntry"],[3,"WalkDir"],[3,"DirBuilder"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"LineWriter"],[3,"Cursor"],[3,"Custom"],[4,"ErrorKind"],[4,"Repr"],[3,"Lazy"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"StdinRaw"],[3,"StdoutRaw"],[3,"StderrRaw"],[4,"Maybe"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[4,"SeekFrom"],[3,"Broadcast"],[3,"Chain"],[3,"Take"],[3,"Tee"],[3,"Bytes"],[4,"CharsError"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpSocket"],[3,"AddrParseError"],[4,"Shutdown"],[3,"LookupHost"],[3,"stat"],[3,"Command"],[3,"ExitStatus"],[3,"Stdio"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"AssertRecoverSafe"],[4,"Prefix"],[4,"State"],[3,"PrefixComponent"],[4,"Component"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Path"],[4,"Cow"],[3,"StripPrefixError"],[3,"Display"],[3,"Output"],[3,"Child"],[3,"SignalToken"],[3,"WaitToken"],[3,"Packet"],[4,"StartResult"],[3,"Select"],[3,"Handle"],[3,"Packets"],[3,"Packet"],[3,"Packet"],[4,"Failure"],[3,"Packet"],[3,"Queue"],[3,"Queue"],[3,"SendError"],[3,"RecvError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"IntoIter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"Mutex"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Semaphore"],[3,"SemaphoreGuard"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Duration"],[3,"Instant"],[3,"SystemTime"],[3,"SystemTimeError"],[3,"Condvar"],[3,"EHContext"],[3,"DwarfReader"],[4,"_Unwind_Action"],[4,"_Unwind_Reason_Code"],[3,"Mutex"],[3,"LookupHost"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"Flag"],[3,"PoisonError"],[4,"TryLockError"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"RWLock"],[3,"StaticKey"],[3,"Key"],[3,"CodePoint"],[3,"Wtf8Buf"],[3,"Wtf8"],[3,"Wtf8CodePoints"],[3,"EncodeWide"],[3,"Condvar"],[3,"FileDesc"],[3,"FileAttr"],[3,"OpenOptions"],[3,"FilePermissions"],[3,"FileType"],[3,"ReadDir"],[3,"Dir"],[3,"DirEntry"],[3,"File"],[3,"DirBuilder"],[3,"Mutex"],[3,"ReentrantMutex"],[3,"Socket"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_ll"],[3,"fd_set"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"passwd"],[3,"statvfs"],[3,"sockaddr_nl"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"fsid_t"],[3,"mq_attr"],[3,"cpu_set_t"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"sigset_t"],[3,"stat"],[3,"stat64"],[3,"pthread_attr_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"Env"],[3,"Buf"],[3,"Slice"],[3,"AnonPipe"],[3,"Command"],[3,"ExitStatus"],[3,"Process"],[3,"RWLock"],[3,"Handler"],[3,"Thread"],[3,"Timespec"],[3,"Instant"],[3,"SystemTime"],[3,"Stdin"],[3,"Stdout"],[3,"Stderr"],[4,"Handler"],[3,"PanicInfo"],[3,"Location"],[3,"OsRng"],[3,"ReaderRng"],[3,"StdRng"],[3,"ThreadRngReseeder"],[3,"ThreadRng"],[8,"Any"],[3,"TypeId"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[4,"Ordering"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeFrom"],[3,"Range"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"PhantomData"],[3,"RangeFull"],[3,"RangeTo"],[3,"Unique"],[3,"Shared"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Rc"],[3,"Weak"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Utf16Units"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"ToLowercase"],[3,"ToUppercase"],[4,"CaseMappingIter"],[3,"DecodeUtf16"],[3,"PidIter"],[3,"TidIter"],[4,"ProcFile"],[4,"ProcOper"],[3,"ProcError"],[3,"Meminfo"],[4,"MeminfoError"]]};
searchIndex['prettytable'] = {"items":[[3,"Table","prettytable","An owned printable table",null,null],[3,"TableSlice","","A borrowed immutable `Table` slice\nA `TableSlice` is obtained by slicing a `Table` with the `Slice::slice` method.",null,null],[3,"ColumnIter","","Iterator over immutable cells in a column",null,null],[3,"ColumnIterMut","","Iterator over mutable cells in a column",null,null],[0,"cell","","This module contains definition of table/row cells stuff",null,null],[3,"Cell","prettytable::cell","Represent a table cell containing a string.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"new_align","","Create a new `Cell` initialized with content from `string`.\nText alignment in cell is configurable with the `align` argument",0,{"inputs":[{"name":"cell"},{"name":"str"},{"name":"alignment"}],"output":{"name":"cell"}}],[11,"new","","Create a new `Cell` initialized with content from `string`.\nBy default, content is align to `LEFT`",0,{"inputs":[{"name":"cell"},{"name":"str"}],"output":{"name":"cell"}}],[11,"align","","Set text alignment in the cell",0,{"inputs":[{"name":"cell"},{"name":"alignment"}],"output":null}],[11,"style","","Add a style attribute to the cell",0,{"inputs":[{"name":"cell"},{"name":"attr"}],"output":null}],[11,"with_style","","Add a style attribute to the cell. Can be chained",0,{"inputs":[{"name":"cell"},{"name":"attr"}],"output":{"name":"cell"}}],[11,"reset_style","","Remove all style attributes and reset alignment to default (LEFT)",0,{"inputs":[{"name":"cell"}],"output":null}],[11,"style_spec","","Set the cell's style by applying the given specifier string",0,{"inputs":[{"name":"cell"},{"name":"str"}],"output":{"name":"cell"}}],[11,"get_height","","Return the height of the cell",0,{"inputs":[{"name":"cell"}],"output":{"name":"usize"}}],[11,"get_width","","Return the width of the cell",0,{"inputs":[{"name":"cell"}],"output":{"name":"usize"}}],[11,"get_content","","Return a copy of the full string contained in the cell",0,{"inputs":[{"name":"cell"}],"output":{"name":"string"}}],[11,"print","","Print a partial cell to `out`. Since the cell may be multi-lined,\n`idx` is the line index to print. `col_width` is the column width used to\nfill the cells with blanks so it fits in the table.\nIf `ìdx` is higher than this cell's height, it will print empty content",0,{"inputs":[{"name":"cell"},{"name":"t"},{"name":"usize"},{"name":"usize"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_term","","Apply style then call `print` to print the cell into a terminal",0,{"inputs":[{"name":"cell"},{"name":"t"},{"name":"usize"},{"name":"usize"},{"name":"bool"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"to_string","","",0,{"inputs":[{"name":"cell"}],"output":{"name":"string"}}],[11,"default","","Return a cell initialized with a single empty `String`, with LEFT alignment",0,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[0,"row","prettytable","This module contains definition of table rows stuff",null,null],[3,"Row","prettytable::row","Represent a table row made of cells",null,null],[11,"fmt","","",1,{"inputs":[{"name":"row"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"row"}],"output":{"name":"row"}}],[11,"new","","Create a new `Row` backed with `cells` vector",1,{"inputs":[{"name":"row"},{"name":"vec"}],"output":{"name":"row"}}],[11,"empty","","Create an row of length `size`, with empty strings stored",1,{"inputs":[{"name":"row"}],"output":{"name":"row"}}],[11,"len","","Get the number of cells in this row",1,{"inputs":[{"name":"row"}],"output":{"name":"usize"}}],[11,"get_height","","Get the height of this row",1,{"inputs":[{"name":"row"}],"output":{"name":"usize"}}],[11,"get_cell_width","","Get the minimum width required by the cell in the column `column`.\nReturn 0 if the cell does not exist in this row",1,{"inputs":[{"name":"row"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"get_cell","","Get the cell at index `idx`",1,{"inputs":[{"name":"row"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut_cell","","Get the mutable cell at index `idx`",1,{"inputs":[{"name":"row"},{"name":"usize"}],"output":{"name":"option"}}],[11,"set_cell","","Set the `cell` in the row at the given `column`",1,{"inputs":[{"name":"row"},{"name":"cell"},{"name":"usize"}],"output":{"name":"result"}}],[11,"add_cell","","Append a `cell` at the end of the row",1,{"inputs":[{"name":"row"},{"name":"cell"}],"output":null}],[11,"insert_cell","","Insert `cell` at position `index`. If `index` is higher than the row lenght,\nthe cell will be appended at the end",1,{"inputs":[{"name":"row"},{"name":"usize"},{"name":"cell"}],"output":null}],[11,"remove_cell","","Remove the cell at position `index`. Silently skip if this cell does not exist",1,{"inputs":[{"name":"row"},{"name":"usize"}],"output":null}],[11,"print","","Print the row to `out`, with `separator` as column separator, and `col_width`\nspecifying the width of each columns",1,null],[11,"print_term","","Print the row to terminal `out`, with `separator` as column separator, and `col_width`\nspecifying the width of each columns. Apply style when needed",1,null],[11,"default","","",1,{"inputs":[{"name":"row"}],"output":{"name":"row"}}],[11,"index","","",1,{"inputs":[{"name":"row"},{"name":"usize"}],"output":{"name":"output"}}],[11,"index_mut","","",1,{"inputs":[{"name":"row"},{"name":"usize"}],"output":{"name":"output"}}],[11,"from_iter","","",1,{"inputs":[{"name":"row"},{"name":"t"}],"output":{"name":"row"}}],[11,"from","","",1,{"inputs":[{"name":"row"},{"name":"t"}],"output":{"name":"row"}}],[0,"format","prettytable","Define table formatting utilities",null,null],[3,"LineSeparator","prettytable::format","Contains the character used for printing a line separator",null,null],[3,"TableFormat","","Contains the table formatting rules",null,null],[3,"FormatBuilder","","A builder to create a `TableFormat`",null,null],[4,"Alignment","","Alignment for cell's content",null,null],[13,"LEFT","","",2,null],[13,"CENTER","","",2,null],[13,"RIGHT","","",2,null],[4,"LinePosition","","Position of a line separator in a table",null,null],[13,"Top","","",3,null],[13,"Title","","",3,null],[13,"Intern","","",3,null],[13,"Bottom","","",3,null],[4,"ColumnPosition","","Position of a column separator in a row",null,null],[13,"Left","","",4,null],[13,"Intern","","",4,null],[13,"Right","","",4,null],[0,"consts","","Predifined formats. Those constants are lazily evaluated when\nthe corresponding struct is dereferenced",null,null],[3,"FORMAT_DEFAULT","prettytable::format::consts","Default table format",null,null],[3,"FORMAT_NO_TITLE","","Similar to `FORMAT_DEFAULT` but without special separator after title line",null,null],[3,"FORMAT_NO_LINESEP_WITH_TITLE","","With no line separator, but with title separator",null,null],[3,"FORMAT_NO_LINESEP","","With no line or title separator",null,null],[3,"FORMAT_NO_COLSEP","","No column separator",null,null],[3,"FORMAT_CLEAN","","Format for printing a table without any separators (only alignment)",null,null],[3,"FORMAT_BORDERS_ONLY","","Format for a table with only external borders and title separator",null,null],[3,"FORMAT_NO_BORDER","","A table with no external border",null,null],[3,"FORMAT_NO_BORDER_LINE_SEPARATOR","","A table with no external border and no line separation",null,null],[11,"deref","","",5,{"inputs":[{"name":"format_default"}],"output":{"name":"tableformat"}}],[11,"deref","","",6,{"inputs":[{"name":"format_no_title"}],"output":{"name":"tableformat"}}],[11,"deref","","",7,{"inputs":[{"name":"format_no_linesep_with_title"}],"output":{"name":"tableformat"}}],[11,"deref","","",8,{"inputs":[{"name":"format_no_linesep"}],"output":{"name":"tableformat"}}],[11,"deref","","",9,{"inputs":[{"name":"format_no_colsep"}],"output":{"name":"tableformat"}}],[11,"deref","","",10,{"inputs":[{"name":"format_clean"}],"output":{"name":"tableformat"}}],[11,"deref","","",11,{"inputs":[{"name":"format_borders_only"}],"output":{"name":"tableformat"}}],[11,"deref","","",12,{"inputs":[{"name":"format_no_border"}],"output":{"name":"tableformat"}}],[11,"deref","","",13,{"inputs":[{"name":"format_no_border_line_separator"}],"output":{"name":"tableformat"}}],[11,"eq","prettytable::format","",2,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"alignment"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"eq","","",3,{"inputs":[{"name":"lineposition"},{"name":"lineposition"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"lineposition"},{"name":"lineposition"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"lineposition"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"lineposition"}],"output":{"name":"lineposition"}}],[11,"eq","","",4,{"inputs":[{"name":"columnposition"},{"name":"columnposition"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"columnposition"},{"name":"columnposition"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"columnposition"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"columnposition"}],"output":{"name":"columnposition"}}],[11,"fmt","","",14,{"inputs":[{"name":"lineseparator"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"lineseparator"}],"output":{"name":"lineseparator"}}],[11,"new","","Create a new line separator instance where `line` is the character used to separate 2 lines\nand `junc` is the one used for junctions between columns and lines",14,{"inputs":[{"name":"lineseparator"},{"name":"char"},{"name":"char"},{"name":"char"},{"name":"char"}],"output":{"name":"lineseparator"}}],[11,"print","","Print a full line separator to `out`. `col_width` is a slice containing the width of each column",14,null],[11,"default","","",14,{"inputs":[{"name":"lineseparator"}],"output":{"name":"self"}}],[11,"fmt","","",15,{"inputs":[{"name":"tableformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"tableformat"}],"output":{"name":"tableformat"}}],[11,"new","","Create a new empty TableFormat.",15,{"inputs":[{"name":"tableformat"}],"output":{"name":"tableformat"}}],[11,"get_padding","","Return a tuple with left and right padding",15,null],[11,"padding","","Set left and right padding",15,{"inputs":[{"name":"tableformat"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"column_separator","","Set the character used for internal column separation",15,{"inputs":[{"name":"tableformat"},{"name":"char"}],"output":null}],[11,"borders","","Set the character used for table borders",15,{"inputs":[{"name":"tableformat"},{"name":"char"}],"output":null}],[11,"separator","","Set a line separator",15,{"inputs":[{"name":"tableformat"},{"name":"lineposition"},{"name":"lineseparator"}],"output":null}],[11,"separators","","Set format for multiple kind of line separator",15,null],[11,"print_line_separator","","Print a full line separator to `out`. `col_width` is a slice containing the width of each column",15,null],[11,"get_column_separator","","",15,{"inputs":[{"name":"tableformat"},{"name":"columnposition"}],"output":{"name":"option"}}],[11,"print_column_separator","","Print a column separator or a table border",15,{"inputs":[{"name":"tableformat"},{"name":"t"},{"name":"columnposition"}],"output":{"name":"result"}}],[11,"default","","",15,{"inputs":[{"name":"tableformat"}],"output":{"name":"self"}}],[11,"new","","",16,{"inputs":[{"name":"formatbuilder"}],"output":{"name":"formatbuilder"}}],[11,"padding","","Set left and right padding",16,{"inputs":[{"name":"formatbuilder"},{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"column_separator","","Set the character used for internal column separation",16,{"inputs":[{"name":"formatbuilder"},{"name":"char"}],"output":{"name":"self"}}],[11,"borders","","Set the character used for table borders",16,{"inputs":[{"name":"formatbuilder"},{"name":"char"}],"output":{"name":"self"}}],[11,"separator","","Set a line separator format",16,{"inputs":[{"name":"formatbuilder"},{"name":"lineposition"},{"name":"lineseparator"}],"output":{"name":"self"}}],[11,"separators","","Set separator format for multiple kind of line separators",16,null],[11,"build","","Consume this builder and return the generated `TableFormat`",16,{"inputs":[{"name":"formatbuilder"}],"output":{"name":"tableformat"}}],[8,"Slice","prettytable","Trait implemented by types which can be sliced",null,null],[16,"Output","","Type output after slicing",17,null],[10,"slice","","Get a slice from self",17,{"inputs":[{"name":"slice"},{"name":"e"}],"output":{"name":"output"}}],[11,"fmt","","",18,{"inputs":[{"name":"table"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"table"}],"output":{"name":"table"}}],[11,"fmt","","",19,{"inputs":[{"name":"tableslice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"tableslice"}],"output":{"name":"tableslice"}}],[11,"get_column_num","","Compute and return the number of column",19,{"inputs":[{"name":"tableslice"}],"output":{"name":"usize"}}],[11,"len","","Get the number of rows",19,{"inputs":[{"name":"tableslice"}],"output":{"name":"usize"}}],[11,"get_row","","Get an immutable reference to a row",19,{"inputs":[{"name":"tableslice"},{"name":"usize"}],"output":{"name":"option"}}],[11,"column_iter","","Return an iterator over the immutable cells of the column specified by `column`",19,{"inputs":[{"name":"tableslice"},{"name":"usize"}],"output":{"name":"columniter"}}],[11,"print","","Print the table to `out`",19,{"inputs":[{"name":"tableslice"},{"name":"t"}],"output":{"name":"result"}}],[11,"print_term","","Print the table to terminal `out`, applying styles when needed",19,{"inputs":[{"name":"tableslice"},{"name":"t"}],"output":{"name":"result"}}],[11,"print_tty","","Print the table to standard output. Colors won't be displayed unless\nstdout is a tty terminal, or `force_colorize` is set to `true`.\nIn ANSI terminals, colors are displayed using ANSI escape characters. When for example the\noutput is redirected to a file, or piped to another program, the output is considered\nas not beeing tty, and ANSI escape characters won't be displayed unless `force colorize`\nis set to `true`.\n# Panic\nPanic if writing to standard output fails",19,{"inputs":[{"name":"tableslice"},{"name":"bool"}],"output":null}],[11,"printstd","","Print the table to standard output. Colors won't be displayed unless\nstdout is a tty terminal. This means that if stdout is redirected to a file, or piped\nto another program, no color will be displayed.\nTo force colors rendering, use `print_tty()` method.\nCalling `printstd()` is equivalent to calling `print_tty(false)`\n# Panic\nPanic if writing to standard output fails",19,{"inputs":[{"name":"tableslice"}],"output":null}],[11,"new","","Create an empty table",18,{"inputs":[{"name":"table"}],"output":{"name":"table"}}],[11,"init","","Create a table initialized with `rows`",18,{"inputs":[{"name":"table"},{"name":"vec"}],"output":{"name":"table"}}],[11,"set_format","","Change the table format. Eg : Separators",18,{"inputs":[{"name":"table"},{"name":"tableformat"}],"output":null}],[11,"get_column_num","","Compute and return the number of column",18,{"inputs":[{"name":"table"}],"output":{"name":"usize"}}],[11,"len","","Get the number of rows",18,{"inputs":[{"name":"table"}],"output":{"name":"usize"}}],[11,"set_titles","","Set the optional title lines",18,{"inputs":[{"name":"table"},{"name":"row"}],"output":null}],[11,"unset_titles","","Unset the title line",18,{"inputs":[{"name":"table"}],"output":null}],[11,"get_mut_row","","Get a mutable reference to a row",18,{"inputs":[{"name":"table"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_row","","Get an immutable reference to a row",18,{"inputs":[{"name":"table"},{"name":"usize"}],"output":{"name":"option"}}],[11,"add_row","","Append a row in the table, transferring ownership of this row to the table\nand returning a mutable reference to the row",18,{"inputs":[{"name":"table"},{"name":"row"}],"output":{"name":"row"}}],[11,"add_empty_row","","Append an empty row in the table. Return a mutable reference to this new row.",18,{"inputs":[{"name":"table"}],"output":{"name":"row"}}],[11,"insert_row","","Insert `row` at the position `index`, and return a mutable reference to this row.\nIf index is higher than current numbers of rows, `row` is appended at the end of the table",18,{"inputs":[{"name":"table"},{"name":"usize"},{"name":"row"}],"output":{"name":"row"}}],[11,"set_element","","Modify a single element in the table",18,{"inputs":[{"name":"table"},{"name":"str"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"remove_row","","Remove the row at position `index`. Silently skip if the row does not exist",18,{"inputs":[{"name":"table"},{"name":"usize"}],"output":null}],[11,"column_iter","","Return an iterator over the immutable cells of the column specified by `column`",18,{"inputs":[{"name":"table"},{"name":"usize"}],"output":{"name":"columniter"}}],[11,"column_iter_mut","","Return an iterator over the mutable cells of the column specified by `column`",18,{"inputs":[{"name":"table"},{"name":"usize"}],"output":{"name":"columnitermut"}}],[11,"print","","Print the table to `out`",18,{"inputs":[{"name":"table"},{"name":"t"}],"output":{"name":"result"}}],[11,"print_term","","Print the table to terminal `out`, applying styles when needed",18,{"inputs":[{"name":"table"},{"name":"t"}],"output":{"name":"result"}}],[11,"print_tty","","Print the table to standard output. Colors won't be displayed unless\nstdout is a tty terminal, or `force_colorize` is set to `true`.\nIn ANSI terminals, colors are displayed using ANSI escape characters. When for example the\noutput is redirected to a file, or piped to another program, the output is considered\nas not beeing tty, and ANSI escape characters won't be displayed unless `force colorize`\nis set to `true`.\n# Panic\nPanic if writing to standard output fails",18,{"inputs":[{"name":"table"},{"name":"bool"}],"output":null}],[11,"printstd","","Print the table to standard output. Colors won't be displayed unless\nstdout is a tty terminal. This means that if stdout is redirected to a file, or piped\nto another program, no color will be displayed.\nTo force colors rendering, use `print_tty()` method.\nCalling `printstd()` is equivalent to calling `print_tty(false)`\n# Panic\nPanic if writing to standard output fails",18,{"inputs":[{"name":"table"}],"output":null}],[11,"index","","",18,{"inputs":[{"name":"table"},{"name":"usize"}],"output":{"name":"output"}}],[11,"index","","",19,{"inputs":[{"name":"tableslice"},{"name":"usize"}],"output":{"name":"output"}}],[11,"index_mut","","",18,{"inputs":[{"name":"table"},{"name":"usize"}],"output":{"name":"output"}}],[11,"fmt","","",18,{"inputs":[{"name":"table"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"tableslice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",18,{"inputs":[{"name":"table"},{"name":"t"}],"output":{"name":"table"}}],[11,"from","","",18,{"inputs":[{"name":"table"},{"name":"t"}],"output":{"name":"table"}}],[11,"next","","",20,{"inputs":[{"name":"columniter"}],"output":{"name":"option"}}],[11,"next","","",21,{"inputs":[{"name":"columnitermut"}],"output":{"name":"option"}}],[11,"as_ref","","",19,{"inputs":[{"name":"tableslice"}],"output":{"name":"tableslice"}}],[11,"as_ref","","",18,{"inputs":[{"name":"table"}],"output":{"name":"tableslice"}}],[14,"cell!","","This macro simplifies `Cell` creation",null,null],[14,"row!","","This macro simplifies `Row` creation",null,null],[14,"table!","","Create a table filled with some values",null,null],[14,"ptable!","","Create a table with `table!` macro, print it to standard output, then return this table for future usage.",null,null]],"paths":[[3,"Cell"],[3,"Row"],[4,"Alignment"],[4,"LinePosition"],[4,"ColumnPosition"],[3,"FORMAT_DEFAULT"],[3,"FORMAT_NO_TITLE"],[3,"FORMAT_NO_LINESEP_WITH_TITLE"],[3,"FORMAT_NO_LINESEP"],[3,"FORMAT_NO_COLSEP"],[3,"FORMAT_CLEAN"],[3,"FORMAT_BORDERS_ONLY"],[3,"FORMAT_NO_BORDER"],[3,"FORMAT_NO_BORDER_LINE_SEPARATOR"],[3,"LineSeparator"],[3,"TableFormat"],[3,"FormatBuilder"],[8,"Slice"],[3,"Table"],[3,"TableSlice"],[3,"ColumnIter"],[3,"ColumnIterMut"]]};
searchIndex['atty'] = {"items":[[5,"is","atty","returns true if this is a tty",null,{"inputs":[],"output":{"name":"bool"}}],[5,"isnt","","returns true if this is _not_ a tty",null,{"inputs":[],"output":{"name":"bool"}}]],"paths":[]};
searchIndex['libc'] = {"items":[[3,"utimbuf","libc","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",12,null],[12,"sa_data","","",12,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",13,null],[12,"sin_port","","",13,null],[12,"sin_addr","","",13,null],[12,"sin_zero","","",13,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",14,null],[12,"sin6_port","","",14,null],[12,"sin6_flowinfo","","",14,null],[12,"sin6_addr","","",14,null],[12,"sin6_scope_id","","",14,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",15,null],[12,"sun_path","","",15,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",16,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",17,null],[12,"ai_family","","",17,null],[12,"ai_socktype","","",17,null],[12,"ai_protocol","","",17,null],[12,"ai_addrlen","","",17,null],[12,"ai_addr","","",17,null],[12,"ai_canonname","","",17,null],[12,"ai_next","","",17,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",18,null],[12,"sll_protocol","","",18,null],[12,"sll_ifindex","","",18,null],[12,"sll_hatype","","",18,null],[12,"sll_pkttype","","",18,null],[12,"sll_halen","","",18,null],[12,"sll_addr","","",18,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",19,null],[12,"tm_min","","",19,null],[12,"tm_hour","","",19,null],[12,"tm_mday","","",19,null],[12,"tm_mon","","",19,null],[12,"tm_year","","",19,null],[12,"tm_wday","","",19,null],[12,"tm_yday","","",19,null],[12,"tm_isdst","","",19,null],[12,"tm_gmtoff","","",19,null],[12,"tm_zone","","",19,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",20,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",21,null],[12,"dli_fbase","","",21,null],[12,"dli_sname","","",21,null],[12,"dli_saddr","","",21,null],[3,"epoll_event","","",null,null],[12,"events","","",22,null],[12,"u64","","",22,null],[3,"utsname","","",null,null],[12,"sysname","","",23,null],[12,"nodename","","",23,null],[12,"release","","",23,null],[12,"version","","",23,null],[12,"machine","","",23,null],[12,"domainname","","",23,null],[3,"dirent","","",null,null],[12,"d_ino","","",24,null],[12,"d_off","","",24,null],[12,"d_reclen","","",24,null],[12,"d_type","","",24,null],[12,"d_name","","",24,null],[3,"dirent64","","",null,null],[12,"d_ino","","",25,null],[12,"d_off","","",25,null],[12,"d_reclen","","",25,null],[12,"d_type","","",25,null],[12,"d_name","","",25,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",26,null],[12,"rlim_max","","",26,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",27,null],[12,"gl_pathv","","",27,null],[12,"gl_offs","","",27,null],[12,"gl_flags","","",27,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",28,null],[12,"ifa_name","","",28,null],[12,"ifa_flags","","",28,null],[12,"ifa_addr","","",28,null],[12,"ifa_netmask","","",28,null],[12,"ifa_ifu","","",28,null],[12,"ifa_data","","",28,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",29,null],[12,"pw_passwd","","",29,null],[12,"pw_uid","","",29,null],[12,"pw_gid","","",29,null],[12,"pw_gecos","","",29,null],[12,"pw_dir","","",29,null],[12,"pw_shell","","",29,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",30,null],[12,"f_frsize","","",30,null],[12,"f_blocks","","",30,null],[12,"f_bfree","","",30,null],[12,"f_bavail","","",30,null],[12,"f_files","","",30,null],[12,"f_ffree","","",30,null],[12,"f_favail","","",30,null],[12,"f_fsid","","",30,null],[12,"f_flag","","",30,null],[12,"f_namemax","","",30,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",31,null],[12,"nl_pid","","",31,null],[12,"nl_groups","","",31,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",32,null],[12,"dqb_bsoftlimit","","",32,null],[12,"dqb_curspace","","",32,null],[12,"dqb_ihardlimit","","",32,null],[12,"dqb_isoftlimit","","",32,null],[12,"dqb_curinodes","","",32,null],[12,"dqb_btime","","",32,null],[12,"dqb_itime","","",32,null],[12,"dqb_valid","","",32,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",33,null],[12,"ssi_errno","","",33,null],[12,"ssi_code","","",33,null],[12,"ssi_pid","","",33,null],[12,"ssi_uid","","",33,null],[12,"ssi_fd","","",33,null],[12,"ssi_tid","","",33,null],[12,"ssi_band","","",33,null],[12,"ssi_overrun","","",33,null],[12,"ssi_trapno","","",33,null],[12,"ssi_status","","",33,null],[12,"ssi_int","","",33,null],[12,"ssi_ptr","","",33,null],[12,"ssi_utime","","",33,null],[12,"ssi_stime","","",33,null],[12,"ssi_addr","","",33,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",34,null],[12,"mq_maxmsg","","",34,null],[12,"mq_msgsize","","",34,null],[12,"mq_curmsgs","","",34,null],[3,"cpu_set_t","","",null,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",35,null],[12,"sa_mask","","",35,null],[12,"sa_flags","","",35,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",36,null],[12,"ss_flags","","",36,null],[12,"ss_size","","",36,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",37,null],[12,"si_errno","","",37,null],[12,"si_code","","",37,null],[12,"_pad","","",37,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",38,null],[12,"gl_pathv","","",38,null],[12,"gl_offs","","",38,null],[12,"gl_flags","","",38,null],[3,"ucred","","",null,null],[12,"pid","","",39,null],[12,"uid","","",39,null],[12,"gid","","",39,null],[3,"statfs","","",null,null],[12,"f_type","","",40,null],[12,"f_bsize","","",40,null],[12,"f_blocks","","",40,null],[12,"f_bfree","","",40,null],[12,"f_bavail","","",40,null],[12,"f_files","","",40,null],[12,"f_ffree","","",40,null],[12,"f_fsid","","",40,null],[12,"f_namelen","","",40,null],[12,"f_frsize","","",40,null],[3,"msghdr","","",null,null],[12,"msg_name","","",41,null],[12,"msg_namelen","","",41,null],[12,"msg_iov","","",41,null],[12,"msg_iovlen","","",41,null],[12,"msg_control","","",41,null],[12,"msg_controllen","","",41,null],[12,"msg_flags","","",41,null],[3,"termios","","",null,null],[12,"c_iflag","","",42,null],[12,"c_oflag","","",42,null],[12,"c_cflag","","",42,null],[12,"c_lflag","","",42,null],[12,"c_line","","",42,null],[12,"c_cc","","",42,null],[12,"c_ispeed","","",42,null],[12,"c_ospeed","","",42,null],[3,"flock","","",null,null],[12,"l_type","","",43,null],[12,"l_whence","","",43,null],[12,"l_start","","",43,null],[12,"l_len","","",43,null],[12,"l_pid","","",43,null],[3,"sigset_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",44,null],[12,"st_ino","","",44,null],[12,"st_nlink","","",44,null],[12,"st_mode","","",44,null],[12,"st_uid","","",44,null],[12,"st_gid","","",44,null],[12,"st_rdev","","",44,null],[12,"st_size","","",44,null],[12,"st_blksize","","",44,null],[12,"st_blocks","","",44,null],[12,"st_atime","","",44,null],[12,"st_atime_nsec","","",44,null],[12,"st_mtime","","",44,null],[12,"st_mtime_nsec","","",44,null],[12,"st_ctime","","",44,null],[12,"st_ctime_nsec","","",44,null],[3,"stat64","","",null,null],[12,"st_dev","","",45,null],[12,"st_ino","","",45,null],[12,"st_nlink","","",45,null],[12,"st_mode","","",45,null],[12,"st_uid","","",45,null],[12,"st_gid","","",45,null],[12,"st_rdev","","",45,null],[12,"st_size","","",45,null],[12,"st_blksize","","",45,null],[12,"st_blocks","","",45,null],[12,"st_atime","","",45,null],[12,"st_atime_nsec","","",45,null],[12,"st_mtime","","",45,null],[12,"st_mtime_nsec","","",45,null],[12,"st_ctime","","",45,null],[12,"st_ctime_nsec","","",45,null],[3,"pthread_attr_t","","",null,null],[3,"ipc_perm","","",null,null],[12,"__key","","",46,null],[12,"uid","","",46,null],[12,"gid","","",46,null],[12,"cuid","","",46,null],[12,"cgid","","",46,null],[12,"mode","","",46,null],[12,"__seq","","",46,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",47,null],[12,"shm_segsz","","",47,null],[12,"shm_atime","","",47,null],[12,"shm_dtime","","",47,null],[12,"shm_ctime","","",47,null],[12,"shm_cpid","","",47,null],[12,"shm_lpid","","",47,null],[12,"shm_nattch","","",47,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"select","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_gettime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fstat64","","",null,null],[5,"stat64","","",null,null],[5,"open64","","",null,null],[5,"creat64","","",null,null],[5,"lseek64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"mmap64","","",null,null],[5,"lstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"readdir64_r","","",null,null],[5,"getrlimit64","","",null,null],[5,"setrlimit64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"unshare","","",null,null],[5,"sethostname","","",null,null],[5,"setns","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"getnameinfo","","",null,null],[5,"eventfd","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",48,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",48,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",48,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",48,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",48,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",48,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",48,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",48,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",48,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",48,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",48,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",48,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",48,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",48,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",48,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",48,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",48,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",48,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",48,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",48,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\noption.",48,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",48,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","core::num","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"fmt","","",49,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",49,null],[11,"shr","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",49,null],[11,"shl","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",49,null],[11,"shr","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",49,null],[11,"shl","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",49,null],[11,"shr","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",49,null],[11,"shl","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",49,null],[11,"shr","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",49,null],[11,"shl","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",49,null],[11,"shr","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",49,null],[11,"shl","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",49,null],[11,"shr","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",49,null],[11,"shl","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",49,null],[11,"shr","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",49,null],[11,"shl","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",49,null],[11,"shr","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",49,null],[11,"shl","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",49,null],[11,"shr","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",49,null],[11,"shl","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",49,null],[11,"shr","","",49,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",49,null],[11,"add","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",49,null],[11,"sub","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",49,null],[11,"mul","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",49,null],[11,"div","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",49,null],[11,"rem","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",49,null],[11,"not","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",49,null],[11,"bitor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",49,null],[11,"bitand","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",49,null],[11,"add","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",49,null],[11,"sub","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",49,null],[11,"mul","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",49,null],[11,"div","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",49,null],[11,"rem","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",49,null],[11,"not","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",49,null],[11,"bitor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",49,null],[11,"bitand","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",49,null],[11,"add","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",49,null],[11,"sub","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",49,null],[11,"mul","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",49,null],[11,"div","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",49,null],[11,"rem","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",49,null],[11,"not","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",49,null],[11,"bitor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",49,null],[11,"bitand","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",49,null],[11,"add","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",49,null],[11,"sub","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",49,null],[11,"mul","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",49,null],[11,"div","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",49,null],[11,"rem","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",49,null],[11,"not","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",49,null],[11,"bitor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",49,null],[11,"bitand","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",49,null],[11,"add","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",49,null],[11,"sub","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",49,null],[11,"mul","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",49,null],[11,"div","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",49,null],[11,"rem","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",49,null],[11,"not","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",49,null],[11,"bitor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",49,null],[11,"bitand","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",49,null],[11,"add","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",49,null],[11,"sub","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",49,null],[11,"mul","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",49,null],[11,"div","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",49,null],[11,"rem","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",49,null],[11,"not","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",49,null],[11,"bitor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",49,null],[11,"bitand","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",49,null],[11,"add","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",49,null],[11,"sub","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",49,null],[11,"mul","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",49,null],[11,"div","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",49,null],[11,"rem","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",49,null],[11,"not","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",49,null],[11,"bitor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",49,null],[11,"bitand","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",49,null],[11,"add","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",49,null],[11,"sub","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",49,null],[11,"mul","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",49,null],[11,"div","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",49,null],[11,"rem","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",49,null],[11,"not","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",49,null],[11,"bitor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",49,null],[11,"bitand","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",49,null],[11,"add","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",49,null],[11,"sub","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",49,null],[11,"mul","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",49,null],[11,"div","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",49,null],[11,"rem","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",49,null],[11,"not","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",49,null],[11,"bitor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",49,null],[11,"bitand","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",49,null],[11,"add","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",49,null],[11,"sub","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",49,null],[11,"mul","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",49,null],[11,"div","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",49,null],[11,"rem","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",49,null],[11,"not","","",49,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",49,null],[11,"bitor","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",49,null],[11,"bitand","","",49,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",49,null],[11,"eq","core::num::flt2dec::decoder","",50,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"fmt","","",50,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"decoded"}],"output":{"name":"decoded"}}],[11,"eq","","",51,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"fmt","","",51,{"inputs":[{"name":"fulldecoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"fulldecoded"}],"output":{"name":"fulldecoded"}}],[11,"fmt","core::num::flt2dec","",52,{"inputs":[{"name":"part"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"part"}],"output":{"name":"part"}}],[11,"len","","Returns the exact byte length of given part.",52,{"inputs":[{"name":"part"}],"output":{"name":"usize"}}],[11,"write","","Writes a part into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",52,null],[11,"clone","","",53,{"inputs":[{"name":"formatted"}],"output":{"name":"formatted"}}],[11,"len","","Returns the exact byte length of combined formatted result.",53,{"inputs":[{"name":"formatted"}],"output":{"name":"usize"}}],[11,"write","","Writes all formatted parts into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",53,null],[11,"fmt","","",54,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","core::num::dec2flt::rawfp","",55,{"inputs":[{"name":"unpacked"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"unpacked"}],"output":{"name":"unpacked"}}],[11,"new","","",55,{"inputs":[{"name":"unpacked"},{"name":"u64"},{"name":"i16"}],"output":{"name":"unpacked"}}],[11,"fmt","core::num::dec2flt::parse","",56,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"fmt","","",57,{"inputs":[{"name":"decimal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",57,null],[11,"eq","","",58,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"fmt","","",58,{"inputs":[{"name":"parseresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::dec2flt","",59,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",59,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"floaterrorkind"}],"output":{"name":"floaterrorkind"}}],[11,"fmt","","",60,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum","Makes a bignum from one digit.",61,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"from_u64","","Makes a bignum from `u64` value.",61,{"inputs":[{"name":"big32x40"},{"name":"u64"}],"output":{"name":"big32x40"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",61,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",61,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",61,{"inputs":[{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",61,{"inputs":[{"name":"big32x40"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",61,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"add_small","","",61,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",61,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",61,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",61,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",61,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",61,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",61,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",61,null],[11,"eq","","",61,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",61,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"option"}}],[11,"cmp","","",61,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"ordering"}}],[11,"clone","","",61,{"inputs":[{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"fmt","","",61,{"inputs":[{"name":"big32x40"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum::tests","Makes a bignum from one digit.",62,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"from_u64","","Makes a bignum from `u64` value.",62,{"inputs":[{"name":"big8x3"},{"name":"u64"}],"output":{"name":"big8x3"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",62,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",62,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",62,{"inputs":[{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",62,{"inputs":[{"name":"big8x3"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",62,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"add_small","","",62,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",62,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",62,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",62,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",62,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",62,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",62,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",62,null],[11,"eq","","",62,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",62,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"option"}}],[11,"cmp","","",62,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"ordering"}}],[11,"clone","","",62,{"inputs":[{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"fmt","","",62,{"inputs":[{"name":"big8x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num::diy_float","",63,{"inputs":[{"name":"fp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"mul","","Returns a correctly rounded product of itself and `other`.",63,{"inputs":[{"name":"fp"},{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize","","Normalizes itself so that the resulting mantissa is at least `2^63`.",63,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize_to","","Normalizes itself to have the shared exponent.\nIt can only decrease the exponent (and thus increase the mantissa).",63,{"inputs":[{"name":"fp"},{"name":"i16"}],"output":{"name":"fp"}}],[11,"fmt","core::num","",64,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",64,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",65,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",65,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",65,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",66,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",67,null],[11,"fmt","","",67,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",67,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",67,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",67,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",67,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",67,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",67,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",67,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",67,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",67,{"inputs":[{"name":"nonzero"},{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",67,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",68,null],[11,"get","","Dereferences the content.",68,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",68,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",68,null],[11,"fmt","","",68,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",69,null],[11,"clone","","",69,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",69,null],[11,"fmt","","",69,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",70,null],[11,"eq","","",70,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",70,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",70,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",70,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",70,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",71,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",71,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",71,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",72,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",72,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",72,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",73,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",73,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",73,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",74,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",74,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",74,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",75,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",75,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",75,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",75,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",75,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",75,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","libc","",76,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",76,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",76,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",76,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",76,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",76,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",76,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",77,null],[11,"fmt","","",77,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",77,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",77,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",77,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",78,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",79,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",80,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",81,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",82,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",78,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",78,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",78,null],[11,"swap","","Stores a value into the bool, returning the old value.",78,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",78,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",78,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",78,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",78,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",78,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",79,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",79,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",79,null],[11,"swap","","Stores a value into the isize, returning the old value.",79,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",79,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",79,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",79,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",79,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",79,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",79,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",80,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",80,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",80,null],[11,"swap","","Stores a value into the usize, returning the old value.",80,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",80,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",80,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",80,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",80,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",80,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",80,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",81,null],[11,"load","","Loads a value from the pointer.",81,null],[11,"store","","Stores a value into the pointer.",81,null],[11,"swap","","Stores a value into the pointer, returning the old value.",81,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",81,null],[11,"fmt","","",80,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",83,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",83,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",83,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",83,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",83,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",83,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",83,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",84,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",84,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",85,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",85,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",85,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",85,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",85,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",85,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",85,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",85,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",85,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",86,null],[11,"clone","","",86,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",87,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",87,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",87,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",87,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",88,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",88,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",89,null],[11,"deref","","",88,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",88,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",90,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",90,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",90,null],[11,"clone","core::char","",91,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",92,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",91,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"clone","","",93,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",94,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",93,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"count","","",93,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",93,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",93,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","core::iter","",95,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",95,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"next_back","","",95,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",96,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",96,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"next_back","","",96,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",97,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",97,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"clone","","",98,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",99,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",98,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",98,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",98,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",98,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"next_back","","",98,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",100,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",100,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"next_back","","",100,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",101,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",101,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"next_back","","",101,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",102,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",102,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"next_back","","",102,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",103,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",103,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next_back","","",103,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",104,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",104,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"nth","","",104,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",104,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",104,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",105,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",105,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",105,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",105,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",105,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",105,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",105,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",106,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",106,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",106,null],[11,"clone","","",107,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",107,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"clone","","",108,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",108,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",108,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",108,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",108,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"clone","","",109,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",109,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",109,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"clone","","",110,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",110,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"clone","","",111,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",111,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",111,null],[11,"next_back","","",111,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",112,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",112,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",112,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",112,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",112,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",112,null],[11,"next_back","","",112,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",113,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",113,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",113,null],[11,"next_back","","",113,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",114,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",73,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",72,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",114,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",114,null],[11,"clone","","",115,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",115,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",115,null],[11,"next_back","","",115,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",114,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",114,null],[11,"next","core::ops","",72,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"next_back","","",72,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",73,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",116,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",116,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",116,null],[11,"next_back","","",116,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",117,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",117,null],[11,"next_back","","",117,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",117,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",117,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",117,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",118,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",118,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",118,null],[11,"next_back","","",118,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",118,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",48,null],[11,"fmt","","",48,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",48,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",48,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",48,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",48,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",48,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",48,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",48,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",48,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",48,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",119,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",119,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",119,null],[11,"next_back","","",119,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",120,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",120,null],[11,"next_back","","",120,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",120,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",121,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",121,null],[11,"next_back","","",121,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",122,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",122,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",122,null],[11,"next_back","","",122,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",48,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",123,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",124,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",125,null],[11,"fmt","","",125,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",125,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",125,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",125,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",125,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",125,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",125,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",125,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",125,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",125,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",125,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",125,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",125,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",125,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",125,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",125,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",125,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",125,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",125,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",125,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",125,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",125,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",125,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",125,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",125,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",125,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",125,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",125,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",125,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",126,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",126,null],[11,"next_back","","",126,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",126,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",127,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",127,null],[11,"next_back","","",127,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",128,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",128,null],[11,"next_back","","",128,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",125,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",129,null],[11,"next","","",129,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",129,null],[11,"count","","",129,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",129,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",129,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",129,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",129,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",130,null],[11,"next","","",130,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",130,null],[11,"count","","",130,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",130,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",130,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",130,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",131,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",131,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",131,null],[11,"next_back","","",131,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",131,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",132,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",132,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",132,null],[11,"next_back","","",132,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",133,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",133,null],[11,"next","","",134,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",134,null],[11,"next","","",135,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",135,null],[11,"next","","",136,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",136,null],[11,"next","","",137,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",137,null],[11,"clone","","",138,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",138,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",138,null],[11,"count","","",138,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",138,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",138,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",138,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",139,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",139,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",139,null],[11,"count","","",139,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",139,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",139,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",139,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",140,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",140,null],[11,"count","","",140,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",140,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",140,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",140,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",141,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",141,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",141,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",142,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",143,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",142,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",142,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",142,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",144,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",144,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",144,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",144,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",144,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",144,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",144,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",144,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",145,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",145,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",145,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",145,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",145,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",145,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",145,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",145,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",146,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",146,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",146,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",146,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",146,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",146,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",146,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",146,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",147,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",147,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",148,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",148,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",149,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",149,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",147,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",147,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",147,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",147,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",147,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",150,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",150,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",151,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",151,null],[11,"matching","","",151,null],[11,"use_early_reject","","",152,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",152,null],[11,"matching","","",152,null],[11,"eq","core::str","",153,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",153,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",153,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",153,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",153,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",154,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",154,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",154,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",154,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",155,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",155,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",155,null],[11,"next_back","","",155,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",155,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",156,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",156,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",156,null],[11,"next_back","","",156,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",156,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",157,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",157,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",157,null],[11,"count","","",157,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",157,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",157,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",157,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",157,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",158,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",159,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",159,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",160,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",160,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",159,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",160,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",161,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",161,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",162,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",162,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",161,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",162,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",163,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",164,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",164,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",165,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",165,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",166,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",167,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",167,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",168,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",168,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",167,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",168,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",169,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",170,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",170,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",171,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",171,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",170,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",171,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",172,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",172,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",172,null],[11,"next_back","","",172,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",173,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",174,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",174,null],[11,"call_mut","","",174,null],[11,"call_once","","",174,null],[11,"next","","",173,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",173,null],[11,"next_back","","",173,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",175,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",176,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",176,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",176,null],[11,"finish","","",176,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",176,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",176,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"build_hasher","core::hash","",177,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",177,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",177,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"eq","core::fmt::num","",178,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",178,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",178,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",179,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",179,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",179,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",180,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",180,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",181,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",181,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",181,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",182,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",182,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",182,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",183,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",183,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",183,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",184,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",185,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",186,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",186,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",187,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",187,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",187,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",188,null],[11,"entry","","Adds a new entry to the set output.",189,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",189,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",189,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",190,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",190,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",190,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",191,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",191,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",191,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"clone","core::fmt::rt::v1","",192,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",193,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",194,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",194,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",194,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",195,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",196,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"fmt","core::fmt","",197,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",197,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",198,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",199,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",200,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",200,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",200,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",201,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",201,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",201,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",201,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",201,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",201,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",201,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",201,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",201,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",201,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",201,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",201,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",201,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",201,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",201,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",201,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",201,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",201,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",201,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",201,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",201,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",197,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",70,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",83,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",202,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",202,null],[11,"clone","libc","",44,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",45,{"inputs":[{"name":"stat64"}],"output":{"name":"stat64"}}],[11,"clone","","",203,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",204,{"inputs":[{"name":"sigset_t"}],"output":{"name":"sigset_t"}}],[11,"clone","","",35,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",36,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",37,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",38,{"inputs":[{"name":"glob64_t"}],"output":{"name":"glob64_t"}}],[11,"clone","","",39,{"inputs":[{"name":"ucred"}],"output":{"name":"ucred"}}],[11,"clone","","",40,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",41,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",42,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","","",43,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",46,{"inputs":[{"name":"ipc_perm"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",47,{"inputs":[{"name":"shmid_ds"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",24,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",25,{"inputs":[{"name":"dirent64"}],"output":{"name":"dirent64"}}],[11,"clone","","",26,{"inputs":[{"name":"rlimit64"}],"output":{"name":"rlimit64"}}],[11,"clone","","",27,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",28,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",205,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",206,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",207,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",208,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",29,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",30,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",31,{"inputs":[{"name":"sockaddr_nl"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",32,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",33,{"inputs":[{"name":"signalfd_siginfo"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",209,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","","",34,{"inputs":[{"name":"mq_attr"}],"output":{"name":"mq_attr"}}],[11,"clone","","",210,{"inputs":[{"name":"cpu_set_t"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",12,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",13,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",14,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",15,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",16,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",17,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",18,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",211,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",19,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",20,{"inputs":[{"name":"sched_param"}],"output":{"name":"sched_param"}}],[11,"clone","","",21,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",22,{"inputs":[{"name":"epoll_event"}],"output":{"name":"epoll_event"}}],[11,"clone","","",23,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","","",0,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",5,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",6,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",8,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",10,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","","",11,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"CBAUD","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"WNOHANG","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"EXTPROC","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"FIONREAD","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"AF_NETLINK","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"sockaddr_nl"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"stat"],[3,"stat64"],[3,"ipc_perm"],[3,"shmid_ds"],[4,"Option"],[3,"Wrapping"],[3,"Decoded"],[4,"FullDecoded"],[4,"Part"],[3,"Formatted"],[4,"Sign"],[3,"Unpacked"],[4,"Sign"],[3,"Decimal"],[4,"ParseResult"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"Big32x40"],[3,"Big8x3"],[3,"Fp"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex['term'] = {"items":[[4,"Attr","term","Terminal attributes for use with term.attr().",null,null],[13,"Bold","","Bold (or possibly bright) mode",0,null],[13,"Dim","","Dim mode, also called faint or half-bright. Often not supported",0,null],[13,"Italic","","Italics mode. Often not supported",0,null],[13,"Underline","","Underline mode",0,null],[13,"Blink","","Blink mode",0,null],[13,"Standout","","Standout mode. Often implemented as Reverse, sometimes coupled with Bold",0,null],[13,"Reverse","","Reverse mode, inverts the foreground and background colors",0,null],[13,"Secure","","Secure mode, also called invis mode. Hides the printed text",0,null],[13,"ForegroundColor","","Convenience attribute to set the foreground color",0,null],[13,"BackgroundColor","","Convenience attribute to set the background color",0,null],[4,"Error","","An error arising from interacting with the terminal.",null,null],[13,"Io","","Indicates an error from any underlying IO",1,null],[13,"TerminfoParsing","","Indicates an error during terminfo parsing",1,null],[13,"ParameterizedExpansion","","Indicates an error expanding a parameterized string from the terminfo database",1,null],[13,"NotSupported","","Indicates that the terminal does not support the requested operation.",1,null],[13,"TermUnset","","Indicates that the `TERM` environment variable was unset, and thus we were unable to detect\nwhich terminal we should be using.",1,null],[13,"TerminfoEntryNotFound","","Indicates that we were unable to find a terminfo entry for the requested terminal.",1,null],[13,"CursorDestinationInvalid","","Indicates that the cursor could not be moved to the requested position.",1,null],[13,"ColorOutOfRange","","Indicates that the terminal does not support displaying the requested color.",1,null],[5,"stdout","","Return a Terminal wrapping stdout, or None if a terminal couldn't be\nopened.",null,{"inputs":[],"output":{"name":"option"}}],[5,"stderr","","Return a Terminal wrapping stderr, or None if a terminal couldn't be\nopened.",null,{"inputs":[],"output":{"name":"option"}}],[0,"terminfo","","Terminfo database interface.",null,null],[3,"TermInfo","term::terminfo","A parsed terminfo database entry.",null,null],[12,"names","","Names for the terminal",2,null],[12,"bools","","Map of capability name to boolean value",2,null],[12,"numbers","","Map of capability name to numeric value",2,null],[12,"strings","","Map of capability name to raw (unexpanded) string",2,null],[3,"TerminfoTerminal","","A Terminal that knows how many colors it supports, with a reference to its\nparsed Terminfo database record.",null,null],[4,"Error","","An error from parsing a terminfo entry",null,null],[13,"BadMagic","","The \"magic\" number at the start of the file was wrong.",3,null],[13,"NotUtf8","","The names in the file were not valid UTF-8.",3,null],[13,"ShortNames","","The names section of the file was empty",3,null],[13,"TooManyBools","","More boolean parameters are present in the file than this crate knows how to interpret.",3,null],[13,"TooManyNumbers","","More number parameters are present in the file than this crate knows how to interpret.",3,null],[13,"TooManyStrings","","More string parameters are present in the file than this crate knows how to interpret.",3,null],[13,"InvalidLength","","The length of some field was not >= -1.",3,null],[13,"NamesMissingNull","","The names table was missing a trailing null terminator.",3,null],[13,"StringsMissingNull","","The strings table was missing a trailing null terminator.",3,null],[0,"searcher","","ncurses-compatible database discovery",null,null],[5,"get_dbpath_for_term","term::terminfo::searcher","Return path to database entry for `term`",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[0,"parser","term::terminfo","TermInfo format parsing.\nncurses-compatible compiled terminfo format parsing (term(5))",null,null],[0,"compiled","term::terminfo::parser","ncurses-compatible compiled terminfo format parsing (term(5))",null,null],[5,"parse","term::terminfo::parser::compiled","Parse a compiled terminfo entry, using long capability names if `longnames`\nis true",null,{"inputs":[{"name":"read"},{"name":"bool"}],"output":{"name":"result"}}],[5,"msys_terminfo","","Create a dummy TermInfo struct for msys terminals",null,{"inputs":[],"output":{"name":"terminfo"}}],[7,"boolfnames","","",null,null],[7,"boolnames","","",null,null],[7,"numfnames","","",null,null],[7,"numnames","","",null,null],[7,"stringfnames","","",null,null],[7,"stringnames","","",null,null],[0,"parm","term::terminfo","Parameterized string expansion",null,null],[3,"Variables","term::terminfo::parm","Container for static and dynamic variable arrays",null,null],[4,"Param","","Types of parameters a capability can use",null,null],[13,"Words","","",4,null],[13,"Number","","",4,null],[4,"Error","","An error from interpreting a parameterized string.",null,null],[13,"StackUnderflow","","Data was requested from the stack, but the stack didn't have enough elements.",5,null],[13,"TypeMismatch","","The type of the element(s) on top of the stack did not match the type that the operator\nwanted.",5,null],[13,"UnrecognizedFormatOption","","An unrecognized format option was used.",5,null],[13,"InvalidVariableName","","An invalid variable name was used.",5,null],[13,"InvalidParameterIndex","","An invalid parameter index was used.",5,null],[13,"MalformedCharacterConstant","","A malformed character constant was used.",5,null],[13,"IntegerConstantOverflow","","An integer constant was too large (overflowed an i32)",5,null],[13,"MalformedIntegerConstant","","A malformed integer constant was used.",5,null],[13,"FormatWidthOverflow","","A format width constant was too large (overflowed a usize)",5,null],[13,"FormatPrecisionOverflow","","A format precision constant was too large (overflowed a usize)",5,null],[5,"expand","","Expand a parameterized capability",null,null],[11,"clone","","",4,{"inputs":[{"name":"param"}],"output":{"name":"param"}}],[11,"eq","","",5,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"new","","Return a new zero-initialized Variables",6,{"inputs":[{"name":"variables"}],"output":{"name":"variables"}}],[11,"fmt","term::terminfo","",2,{"inputs":[{"name":"terminfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_env","","Create a TermInfo based on current environment.",2,{"inputs":[{"name":"terminfo"}],"output":{"name":"result"}}],[11,"from_name","","Create a TermInfo for the named terminal.",2,{"inputs":[{"name":"terminfo"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_path","","Parse the given TermInfo.",2,{"inputs":[{"name":"terminfo"},{"name":"p"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"error"},{"name":"fromutf8error"}],"output":{"name":"self"}}],[11,"description","","",3,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",3,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fg","","",7,{"inputs":[{"name":"terminfoterminal"},{"name":"color"}],"output":{"name":"result"}}],[11,"bg","","",7,{"inputs":[{"name":"terminfoterminal"},{"name":"color"}],"output":{"name":"result"}}],[11,"attr","","",7,{"inputs":[{"name":"terminfoterminal"},{"name":"attr"}],"output":{"name":"result"}}],[11,"supports_attr","","",7,{"inputs":[{"name":"terminfoterminal"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"reset","","",7,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"result"}}],[11,"supports_reset","","",7,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"bool"}}],[11,"supports_color","","",7,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"bool"}}],[11,"cursor_up","","",7,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"result"}}],[11,"delete_line","","",7,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"result"}}],[11,"carriage_return","","",7,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"result"}}],[11,"get_ref","","",7,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"t"}}],[11,"get_mut","","",7,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"t"}}],[11,"into_inner","","",7,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"t"}}],[11,"new_with_terminfo","","Create a new TerminfoTerminal with the given TermInfo and Write.",7,{"inputs":[{"name":"terminfoterminal"},{"name":"t"},{"name":"terminfo"}],"output":{"name":"terminfoterminal"}}],[11,"new","","Create a new TerminfoTerminal for the current environment with the given Write.",7,{"inputs":[{"name":"terminfoterminal"},{"name":"t"}],"output":{"name":"option"}}],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"result"}}],[0,"color","term","Terminal color definitions",null,null],[6,"Color","term::color","Number for a terminal color",null,null],[17,"BLACK","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"YELLOW","","",null,null],[17,"BLUE","","",null,null],[17,"MAGENTA","","",null,null],[17,"CYAN","","",null,null],[17,"WHITE","","",null,null],[17,"BRIGHT_BLACK","","",null,null],[17,"BRIGHT_RED","","",null,null],[17,"BRIGHT_GREEN","","",null,null],[17,"BRIGHT_YELLOW","","",null,null],[17,"BRIGHT_BLUE","","",null,null],[17,"BRIGHT_MAGENTA","","",null,null],[17,"BRIGHT_CYAN","","",null,null],[17,"BRIGHT_WHITE","","",null,null],[6,"StdoutTerminal","term","Alias for stdout terminals.",null,null],[6,"StderrTerminal","","Alias for stderr terminals.",null,null],[6,"Result","","The canonical `Result` type using this crate's Error type.",null,null],[8,"Terminal","","A terminal with similar capabilities to an ANSI Terminal\n(foreground/background colors etc).",null,null],[16,"Output","","The terminal's output writer type.",8,null],[10,"fg","","Sets the foreground color to the given color.",8,{"inputs":[{"name":"terminal"},{"name":"color"}],"output":{"name":"result"}}],[10,"bg","","Sets the background color to the given color.",8,{"inputs":[{"name":"terminal"},{"name":"color"}],"output":{"name":"result"}}],[10,"attr","","Sets the given terminal attribute, if supported.  Returns `Ok(())` if the attribute is\nsupported and was sent to the terminal, or `Err(e)` if there was an error or the attribute\nwasn't supported.",8,{"inputs":[{"name":"terminal"},{"name":"attr"}],"output":{"name":"result"}}],[10,"supports_attr","","Returns whether the given terminal attribute is supported.",8,{"inputs":[{"name":"terminal"},{"name":"attr"}],"output":{"name":"bool"}}],[10,"reset","","Resets all terminal attributes and colors to their defaults.",8,{"inputs":[{"name":"terminal"}],"output":{"name":"result"}}],[10,"supports_reset","","Returns true if reset is supported.",8,{"inputs":[{"name":"terminal"}],"output":{"name":"bool"}}],[10,"supports_color","","Returns true if color is fully supported.",8,{"inputs":[{"name":"terminal"}],"output":{"name":"bool"}}],[10,"cursor_up","","Moves the cursor up one line.",8,{"inputs":[{"name":"terminal"}],"output":{"name":"result"}}],[10,"delete_line","","Deletes the text from the cursor location to the end of the line.",8,{"inputs":[{"name":"terminal"}],"output":{"name":"result"}}],[10,"carriage_return","","Moves the cursor to the left edge of the current line.",8,{"inputs":[{"name":"terminal"}],"output":{"name":"result"}}],[10,"get_ref","","Gets an immutable reference to the stream inside",8,{"inputs":[{"name":"terminal"}],"output":{"name":"output"}}],[10,"get_mut","","Gets a mutable reference to the stream inside",8,{"inputs":[{"name":"terminal"}],"output":{"name":"output"}}],[10,"into_inner","","Returns the contained stream, destroying the `Terminal`",8,{"inputs":[{"name":"terminal"}],"output":{"name":"output"}}],[11,"clone","","",0,{"inputs":[{"name":"attr"}],"output":{"name":"attr"}}],[11,"eq","","",0,{"inputs":[{"name":"attr"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"attr"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"attr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from","std::io::error","",9,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from","term","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"self"}}]],"paths":[[4,"Attr"],[4,"Error"],[3,"TermInfo"],[4,"Error"],[4,"Param"],[4,"Error"],[3,"Variables"],[3,"TerminfoTerminal"],[8,"Terminal"],[3,"Error"]]};
searchIndex['argparse'] = {"items":[[3,"StoreTrue","argparse","",null,null],[3,"StoreFalse","","",null,null],[3,"StoreConst","","",null,null],[3,"PushConst","","",null,null],[3,"Store","","",null,null],[3,"Parse","","",null,null],[3,"StoreOption","","",null,null],[3,"ParseOption","","",null,null],[3,"List","","",null,null],[3,"ParseList","","",null,null],[3,"Collect","","",null,null],[3,"ParseCollect","","",null,null],[3,"Print","","Print string and exit with status 0",null,null],[3,"IncrBy","","",null,null],[3,"DecrBy","","",null,null],[0,"action","","",null,null],[4,"ParseResult","argparse::action","",null,null],[13,"Parsed","","",0,null],[13,"Help","","",0,null],[13,"Exit","","",0,null],[13,"Error","","",0,null],[4,"Action","","",null,null],[13,"Flag","","",1,null],[13,"Single","","",1,null],[13,"Push","","",1,null],[13,"Many","","",1,null],[8,"TypedAction","","",null,null],[10,"bind","","",2,{"inputs":[{"name":"typedaction"},{"name":"rc"}],"output":{"name":"action"}}],[8,"IFlagAction","","",null,null],[10,"parse_flag","","",3,{"inputs":[{"name":"iflagaction"}],"output":{"name":"parseresult"}}],[8,"IArgAction","","",null,null],[10,"parse_arg","","",4,{"inputs":[{"name":"iargaction"},{"name":"str"}],"output":{"name":"parseresult"}}],[8,"IArgsAction","","",null,null],[10,"parse_args","","",5,null],[0,"parser","argparse","",null,null],[3,"Var","argparse::parser","",null,null],[3,"Ref","","",null,null],[3,"ArgumentParser","","The main argument parser class",null,null],[11,"hash","","",6,{"inputs":[{"name":"var"},{"name":"h"}],"output":null}],[11,"eq","","",6,{"inputs":[{"name":"var"},{"name":"var"}],"output":{"name":"bool"}}],[11,"add_option","","",7,null],[11,"add_argument","","",7,{"inputs":[{"name":"ref"},{"name":"str"},{"name":"a"},{"name":"str"}],"output":{"name":"ref"}}],[11,"metavar","","",7,{"inputs":[{"name":"ref"},{"name":"str"}],"output":{"name":"ref"}}],[11,"required","","",7,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"envvar","","",7,{"inputs":[{"name":"ref"},{"name":"str"}],"output":{"name":"ref"}}],[11,"new","","Create an empty argument parser",8,{"inputs":[{"name":"argumentparser"}],"output":{"name":"argumentparser"}}],[11,"refer","","Borrow mutable variable for an argument",8,{"inputs":[{"name":"argumentparser"},{"name":"t"}],"output":{"name":"box"}}],[11,"add_option","","Add option to argument parser",8,null],[11,"set_description","","Set description of the command",8,{"inputs":[{"name":"argumentparser"},{"name":"str"}],"output":null}],[11,"print_help","","Print help",8,{"inputs":[{"name":"argumentparser"},{"name":"str"},{"name":"write"}],"output":{"name":"ioresult"}}],[11,"print_usage","","Print usage",8,{"inputs":[{"name":"argumentparser"},{"name":"str"},{"name":"write"}],"output":{"name":"ioresult"}}],[11,"parse","","Parse arguments",8,{"inputs":[{"name":"argumentparser"},{"name":"vec"},{"name":"write"},{"name":"write"}],"output":{"name":"result"}}],[11,"error","","Write an error similar to one produced by the library itself",8,{"inputs":[{"name":"argumentparser"},{"name":"str"},{"name":"str"},{"name":"write"}],"output":null}],[11,"stop_on_first_argument","","Configure parser to ignore options when first non-option argument is\nencountered.",8,{"inputs":[{"name":"argumentparser"},{"name":"bool"}],"output":null}],[11,"silence_double_dash","","Do not put double-dash (bare `--`) into argument",8,{"inputs":[{"name":"argumentparser"},{"name":"bool"}],"output":null}],[11,"parse_args","","Convenience method to parse arguments",8,{"inputs":[{"name":"argumentparser"}],"output":{"name":"result"}}],[11,"parse_args_or_exit","","The simplest conveninece method",8,{"inputs":[{"name":"argumentparser"}],"output":null}],[11,"bind","argparse","",9,{"inputs":[{"name":"storeconst"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",10,{"inputs":[{"name":"pushconst"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",11,{"inputs":[{"name":"store"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",12,{"inputs":[{"name":"storeoption"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",13,{"inputs":[{"name":"list"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",14,{"inputs":[{"name":"collect"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",15,{"inputs":[{"name":"parse"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",16,{"inputs":[{"name":"parseoption"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",17,{"inputs":[{"name":"parselist"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",18,{"inputs":[{"name":"parsecollect"},{"name":"rc"}],"output":{"name":"action"}}],[11,"parse_flag","","",19,{"inputs":[{"name":"print"}],"output":{"name":"parseresult"}}],[11,"bind","","",20,{"inputs":[{"name":"storetrue"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",21,{"inputs":[{"name":"storefalse"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",22,{"inputs":[{"name":"incrby"},{"name":"rc"}],"output":{"name":"action"}}],[11,"bind","","",23,{"inputs":[{"name":"decrby"},{"name":"rc"}],"output":{"name":"action"}}],[11,"from_argument","std::path","",24,{"inputs":[{"name":"pathbuf"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_argument","collections::string","",25,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_argument","std::net::ip","",26,{"inputs":[{"name":"ipv4addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_argument","","",27,{"inputs":[{"name":"ipv6addr"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_argument","std::net::addr","",28,{"inputs":[{"name":"socketaddr"},{"name":"str"}],"output":{"name":"result"}}],[8,"FromCommandLine","argparse","",null,null],[10,"from_argument","","",29,{"inputs":[{"name":"fromcommandline"},{"name":"str"}],"output":{"name":"result"}}]],"paths":[[4,"ParseResult"],[4,"Action"],[8,"TypedAction"],[8,"IFlagAction"],[8,"IArgAction"],[8,"IArgsAction"],[3,"Var"],[3,"Ref"],[3,"ArgumentParser"],[3,"StoreConst"],[3,"PushConst"],[3,"Store"],[3,"StoreOption"],[3,"List"],[3,"Collect"],[3,"Parse"],[3,"ParseOption"],[3,"ParseList"],[3,"ParseCollect"],[3,"Print"],[3,"StoreTrue"],[3,"StoreFalse"],[3,"IncrBy"],[3,"DecrBy"],[3,"PathBuf"],[3,"String"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[8,"FromCommandLine"]]};
searchIndex['kernel32'] = {"items":[],"paths":[]};
searchIndex['winapi'] = {"items":[],"paths":[]};
searchIndex['unicode_width'] = {"items":[[17,"UNICODE_VERSION","unicode_width","The version of [Unicode](http://www.unicode.org/)\nthat this version of unicode-width is based on.",null,null],[8,"UnicodeWidthChar","","Methods for determining displayed width of Unicode characters.",null,null],[10,"width","","Returns the character's displayed width in columns, or `None` if the\ncharacter is a control character other than `'\\x00'`.",0,{"inputs":[{"name":"unicodewidthchar"}],"output":{"name":"option"}}],[10,"width_cjk","","Returns the character's displayed width in columns, or `None` if the\ncharacter is a control character other than `'\\x00'`.",0,{"inputs":[{"name":"unicodewidthchar"}],"output":{"name":"option"}}],[8,"UnicodeWidthStr","","Methods for determining displayed width of Unicode strings.",null,null],[10,"width","","Returns the string's displayed width in columns.",1,{"inputs":[{"name":"unicodewidthstr"}],"output":{"name":"usize"}}],[10,"width_cjk","","Returns the string's displayed width in columns.",1,{"inputs":[{"name":"unicodewidthstr"}],"output":{"name":"usize"}}]],"paths":[[8,"UnicodeWidthChar"],[8,"UnicodeWidthStr"]]};
searchIndex['lazy_static'] = {"items":[[14,"lazy_static!","lazy_static","",null,null]],"paths":[]};
initSearch(searchIndex);
